import*as w from"../../__snowpack__/env.js";import g from"../../__snowpack__/pkg/i18next.js";import y from"../../__snowpack__/pkg/query-string.js";import{toast as m}from"../../__snowpack__/pkg/react-toastify.js";const p=w.SNOWPACK_PUBLIC_API_TOKEN_KEY,E=w.SNOWPACK_PUBLIC_API_URL;console.log("API_URL",p);const h="X-VisualDL-Instance-ID",_=p?y.parse(window.location.search)[p]:"";export function getApiToken(){return _!=null?_:null}function A(o){const n=getApiToken();if(!p||!n)return o;const{headers:e,...l}=o||{},a=new Headers(e);return Array.isArray(n)?n.forEach(r=>a.append(h,r)):a.append(h,n),{...l,headers:a}}function P(){return new Promise(o=>{g.changeLanguage(void 0).then(n=>o(n))})}function i(o){return w.MODE==="development"&&console.error(o),P()}export async function fetcher(o,n){var a;let e;try{e=await fetch(E+o,A(n)),console.log("ressponse",e)}catch(r){const t=await i(r);throw new Error(t("errors:network-error"))}if(!e.ok){const r=await i(e);throw new Error(r([`errors:response-error.${e.status}`,"errors:response-error.unknown"]))}const l=(a=e.headers.get("content-type"))!=null?a:"";if(l.includes("application/json")){let r;try{r=await e.json()}catch(t){const c=await i(t);throw new Error(c("errors:parse-error"))}if(r&&"status"in r)if(r.status!==0){const t=await i(r);throw m.error(r.msg),new Error(r.msg||t("errors:error"))}else return r.data;return r}else if(l.startsWith("text/")){let r;try{r=await e.text()}catch(t){const c=await i(t);throw new Error(c("errors:parse-error"))}return r}else{let r;try{console.log("datas",e),r=await e.blob()}catch(s){const f=await i(s);throw new Error(f("errors:parse-error"))}const t=e.headers.get("Content-Disposition");r.arrayBuffer||(console.log("arrayBuffer",r),r.arrayBuffer=async()=>new Promise((s,f)=>{const u=new FileReader;u.addEventListener("load",d=>d.target?s(d.target.result):f()),u.readAsArrayBuffer(r)})),console.log("datas",r);let c=null;if(t&&t.indexOf("attachment")!==-1){const s=/filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/.exec(t);s!=null&&s[1]&&(c=s[1].replace(/['"]/g,""))}return{data:r,type:e.headers.get("Content-Type"),filename:c}}}export const cycleFetcher=async(o,n)=>await Promise.all(o.map(e=>fetcher(e,n)));
