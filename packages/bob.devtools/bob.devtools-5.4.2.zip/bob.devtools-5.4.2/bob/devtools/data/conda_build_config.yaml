# Make sure this file is up-to-date with:
# https://github.com/conda-forge/conda-forge-pinning-feedstock/blob/main/recipe/conda_build_config.yaml

# This differs from target_platform in that it determines what subdir the compiler
#    will target, not what subdir the compiler package will be itself.
#    For example, we need a win-64 vs2008_win-32 package, so that we compile win-32
#    code on win-64 miniconda.
c_compiler:
  - gcc                        # [linux]
  - clang                      # [osx]
c_compiler_version:            # [unix]
  - 10                         # [linux]
  - 14                         # [osx]
  - 7                          # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 9                          # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 10                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 10                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
cxx_compiler:
  - gxx                        # [linux]
  - clangxx                    # [osx]
cxx_compiler_version:          # [unix]
  - 10                         # [linux]
  - 14                         # [osx]
  - 7                          # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 9                          # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 10                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 10                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
llvm_openmp:                   # [osx]
  - 14                         # [osx]
fortran_compiler:              # [unix or win64]
  - gfortran                   # [linux64 or (osx and x86_64)]
  - gfortran                   # [aarch64 or ppc64le or armv7l or s390x]
fortran_compiler_version:      # [unix or win64]
  - 10                         # [linux]
  - 11                         # [osx and arm64]
  - 9                          # [osx and x86_64]
  - 7                          # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 9                          # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 10                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]
  - 10                         # [os.environ.get("CF_CUDA_ENABLED", "False") == "True" and linux64]

cuda_compiler:                 # [linux or win]
  - nvcc                       # [linux or win]
cuda_compiler_version:
  - None
  - 10.2                       # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 11.0                       # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 11.1                       # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 11.2                       # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
cuda_compiler_version_min:
  - None                       # [osx]
  - 10.2                       # [linux64 or win]
  - 11.2                       # [linux and (ppc64le or aarch64)]
cudnn:
  - undefined
  - 7                          # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 8                          # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 8                          # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]
  - 8                          # [(linux64 or win) and os.environ.get("CF_CUDA_ENABLED", "False") == "True"]

_libgcc_mutex:
  - 0.1 conda_forge

#
# Go Compiler Options
#

# The basic go-compiler with CGO disabled,
# It generates fat binaries without libc dependencies
# The activation scripts will set your CC,CXX and related flags
# to invalid values.
go_compiler:
  - go-nocgo
# The go compiler build with CGO enabled.
# It can generate fat binaries that depend on conda's libc.
# You should use this compiler if the underlying
# program needs to link against other C libraries, in which
# case make sure to add  'c,cpp,fortran_compiler' for unix
# and the m2w64 equivalent for windows.
cgo_compiler:
  - go-cgo
# The following are helpful variables to simplify go meta.yaml files.
target_goos:
  - linux                      # [linux]
  - darwin                     # [osx]
  - windows                    # [win]
target_goarch:
  - amd64                      # [x86_64]
  - arm64                      # [arm64 or aarch64]
target_goexe:
  -                            # [unix]
  - .exe                       # [win]
target_gobin:
  - '${PREFIX}/bin/'           # [unix]
  - '%PREFIX%\bin\'            # [win]

# Rust Compiler Options
rust_compiler:
  - rust

CONDA_BUILD_SYSROOT:            # [osx]
  - /opt/MacOSX10.9.sdk         # [osx and x86_64]
  - /opt/MacOSX11.0.sdk         # [osx and arm64]
# This helps CMAKE find the sysroot. See
# https://cmake.org/cmake/help/v3.11/variable/CMAKE_OSX_SYSROOT.html
SDKROOT:                        # [osx]
  - /opt/MacOSX10.12.sdk        # [osx and x86_64]
  - /opt/MacOSX11.0.sdk         # [osx and arm64]
macos_machine:                 # [osx]
  - x86_64-apple-darwin13.4.0  # [osx and x86_64]
  - arm64-apple-darwin20.0.0   # [osx and arm64]
# https://conda-forge.org/docs/maintainer/knowledge_base.html#requiring-newer-macos-sdks
# This is the version of the SDK we will use (headers and such)
MACOSX_SDK_VERSION:            # [osx]
  - 11.0                       # [osx and arm64]
  - 10.9                       # [osx and x86_64]
# This is the minimum base system we will target (needs to be smaller or equal
# to the SDK version, for obvious reasons)
MACOSX_DEPLOYMENT_TARGET:      # [osx]
  - 11.0                       # [osx and arm64]
  - 10.9                       # [osx and x86_64]
target_platform:               # [win]
  - win-64                     # [win]
VERBOSE_AT:
  - V=1
# makes cmake verbose
VERBOSE_CM:
  - VERBOSE=1

# dual build configuration
channel_sources:
  - conda-forge,defaults                        # [not (aarch64 or armv7l or (osx and arm64) or s390x)]
  - conda-forge                                 # [osx and arm64]
  - conda-forge                                 # [aarch64]
  - conda-forge,c4armv7l,defaults               # [armv7l]
  - https://conda-web.anaconda.org/conda-forge  # [s390x]

## the dependencies that we build against multiple versions
python:
  # part of a zip_keys: python, python_impl, numpy
  - 3.9.* *_cpython
  - 3.10.* *_cpython
python_impl:
  # part of a zip_keys: python, python_impl, numpy
  - cpython

zip_keys:
  -                             # [unix]
    - c_compiler_version        # [unix]
    - cxx_compiler_version      # [unix]
    - fortran_compiler_version  # [unix]
  # -
  #   - python
  #   - numpy
  #   - python_impl


# TODO: remove these when run_exports are added to the packages.
pin_run_as_build:
  arpack:
    max_pin: x.x.x
  boost:
    max_pin: x.x.x
  boost-cpp:
    max_pin: x.x.x
  bzip2:
    max_pin: x
  cairo:
    max_pin: x.x
  curl:
    max_pin: x
  dbus:
    max_pin: x
  fftw:
    max_pin: x
  flann:
    max_pin: x.x.x
  fontconfig:
    max_pin: x
  freetype:
    max_pin: x
  gdal:
    max_pin: x.x
  geotiff:
    max_pin: x.x.x
  glew:
    max_pin: x.x
  glpk:
    max_pin: x.x
  gmp:
    max_pin: x
  graphviz:
    max_pin: x
  harfbuzz:
    max_pin: x
  hdf4:
    max_pin: x.x
  isl:
    max_pin: x.x
  jasper:
    max_pin: x
  jpeg:
    max_pin: x
  libjpeg_turbo:
    max_pin: x
  json-c:
    max_pin: x.x
  jsoncpp:
    max_pin: x.x.x
  kealib:
    max_pin: x.x
  krb5:
    max_pin: x.x
  libblitz:
    max_pin: x.x
  libcurl:
    max_pin: x
  libevent:
    max_pin: x.x.x
  libffi:
    max_pin: x.x
  libgdal:
    max_pin: x.x
  libiconv:
    max_pin: x.x
  libkml:
    max_pin: x.x
  libpng:
    max_pin: x.x
  librsvg:
    max_pin: x
  libsvm:
    max_pin: x.x
  libtiff:
    max_pin: x
  libxml2:
    max_pin: x.x
  libuuid:
    max_pin: x
  lz4-c:
    max_pin: x.x.x
  lzo:
    max_pin: x
  metis:
    max_pin: x.x
  mpfr:
    max_pin: x
  ncurses:
    max_pin: x.x
  netcdf-cxx4:
    max_pin: x.x
  netcdf-fortran:
    max_pin: x.x
  nettle:
    max_pin: x.x
  nlopt:
    max_pin: x.x.x
  nss:
    max_pin: x
  nspr:
    max_pin: x
  numba:
    max_pin: x.x
  numpy:
    max_pin: x.x
  occt:
    max_pin: x.x
  openturns:
    max_pin: x.x
  openjpeg:
    max_pin: x.x
  pango:
    max_pin: x.x
  perl:
    max_pin: x.x.x
  poppler:
    max_pin: x.x
  qt:
    max_pin: x.x
  qtkeychain:
    max_pin: x.x
  readline:
    max_pin: x
  r-base:
    max_pin: x.x
    min_pin: x.x
  sox:
    max_pin: x.x.x
  spdlog:
    max_pin: x.x
  sqlite:
    max_pin: x
  tk:
    max_pin: x.x
  tiledb:
    max_pin: x.x
  vlfeat:
    max_pin: x.x.x
  vtk:
    max_pin: x.x.x
  xz:
    max_pin: x.x
  zeromq:
    max_pin: x.x  # [not win]
  zlib:
    max_pin: x.x


# Here is the version of dependencies are used when building packages (build
# and host requirements). We keep a list of **all of them** here to make sure
# everything goes as expected in our conda build process.
# Ideally we want to build against the oldest possible version of
# packages so packages can be installed with a wide range of versions. It is
# best to keep this in sync with:
# https://github.com/conda-forge/conda-forge-pinning-feedstock/blob/master/recipe/conda_build_config.yaml
# The names here should not contain dots or dashes. You should replace dots and
# dashes with underlines.

# blas
libblas:
  - 3.9 *netlib
libcblas:
  - 3.9 *netlib
liblapack:
  - 3.9 *netlib
liblapacke:
  - 3.9 *netlib
blas_impl:
  - openblas
  - mkl          # [x86 or x86_64]
  - blis         # [x86 or x86_64]

# AUTOMATIC PARSING START
# DO NOT MODIFY THIS COMMENT

# list all packages with dashes or dots in their names, here:
package_names_map:
  click_plugins: click-plugins
  dask_jobqueue: dask-jobqueue
  dask_ml: dask-ml
  docker_py: docker-py
  font_ttf_dejavu_sans_mono: font-ttf-dejavu-sans-mono
  imageio_ffmpeg: imageio-ffmpeg
  mne_base: mne-base
  pkg_config: pkg-config
  pytest_cov: pytest-cov
  python_graphviz: python-graphviz
  pytorch_lightning: pytorch-lightning
  sphinx_autodoc_typehints: sphinx-autodoc-typehints
  sphinx_click: sphinx-click
  scikit_image: scikit-image
  scikit_learn: scikit-learn
  sphinxcontrib_httpdomain: sphinxcontrib-httpdomain
  sphinxcontrib_mermaid: sphinxcontrib-mermaid
  sphinxcontrib_programoutput: sphinxcontrib-programoutput
  tomli_w: tomli-w


click:
  - "8.1.3"
click_plugins:
  - "1.1.1"
cmake:
  - "3.25.1"
coverage:
  - "7.0.5"
dask:
  - "2022.12.1"
dask_jobqueue:
  - "0.8.1"
dask_ml:
  - "2022.5.27"
ddt:
  - "1.6.0"
distributed:
  - "2022.12.1"
docker_py:
  - "6.0.0"
docopt:
  - "0.6.2"
flaky:
  - "3.7.0"
font_ttf_dejavu_sans_mono:
  - "2.37"
freetype:
  - "2.12.1"
graphviz:
  - "7.0.6"
h5py:
  - "3.7.0"
imageio:
  - "2.24.0"
imageio_ffmpeg:
  - "0.4.7"
jinja2:
  - "3.1.2"
make:
  - "4.3"
matplotlib:
  - "3.6.2"
mne_base:
  - "1.3.0"
ncurses:
  - "6.3"
nose:
  - "1.3.7"
numba:
  - "0.56.4"
numpy:
  - "1.23.5"
opencv:
  - "4.6.0"
openpyxl:
  - "3.0.10"
pandas:
  - "1.5.2"
pillow:
  - "9.4.0"
pip:
  - "22.3.1"
pkg_config:
  - "0.29.2"
psutil:
  - "5.9.4"
pybind11:
  - "2.10.3"
pysoundfile:
  - "0.11.0"
pytest:
  - "7.2.0"
pytest_cov:
  - "4.0.0"
python_graphviz:
  - "0.20.1"
pytorch:
  - "1.13.0 cuda*"  # [linux]
  - "1.13.0"  # [osx]
pytorch_lightning:
  - "1.8.1"
pyyaml:
  - "6.0"
pyzmq:
  - "24.0.1"
requests:
  - "2.28.1"
schema:
  - "0.7.5"
scikit_image:
  - "0.19.3"
scikit_learn:
  - "1.1.2"
scipy:
  - "1.10.0"
setuptools:
  - "65.6.3"
shap:
  - "0.41.0"
simplejson:
  - "3.18.1"
six:
  - "1.16.0"
sphinx:
  - "5.3.0"
sphinx_autodoc_typehints:
  - "1.20.1"
sphinx_click:
  - "4.4.0"
sphinx_rtd_theme:
  - "1.1.1"
sphinxcontrib_programoutput:
  - "0.17"
sqlalchemy:
  - "1.4.46"
tabulate:
  - "0.9.0"
tensorboard:
  - "2.11.0"
tensorflow:
  - "2.11.0 cuda*"  # [linux]
  - "2.11.0"  # [osx]
termcolor:
  - "2.2.0"
tomli:
  - "2.0.1"
tomli_w:
  - "1.0.0"
torchvision:
  - "0.14.0"
tqdm:
  - "4.64.1"
xarray:
  - "2022.12.0"
xgboost:
  - "1.7.1"
xlrd:
  - "2.0.1"

# AUTOMATIC PARSING END
