# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pyrebaselite']

package_data = \
{'': ['*']}

install_requires = \
['requests-toolbelt>=0.10.1,<0.11.0',
 'requests>=2.28.2,<3.0.0',
 'six>=1.16.0,<2.0.0']

setup_kwargs = {
    'name': 'pyrebase4lite',
    'version': '0.1.0',
    'description': '',
    'long_description': '# Pyrebase4Lite\n\nA simple python wrapper for the [Firebase API](https://firebase.google.com).\n\n**This is a fork of [Pyrebase4](https://github.com/nhorvath/Pyrebase4) with the heavy dependecies and the admin priveledge removed**\n\n## Installation\n\n```python\npip install pyrebase4lite\n```\n\n## Getting Started\n\n### Python Version\n\nPyrebase was written for python 3 and will not work correctly with python 2.\n\n### Add Pyrebase to your application\n\nFor use with only user based authentication we can create the following configuration:\n\n```python\nimport pyrebaselite\n\nconfig = {\n    "apiKey": "apiKey",\n    "authDomain": "projectId.firebaseapp.com",\n    "databaseURL": "https://databaseName.firebaseio.com",\n    "storageBucket": "projectId.appspot.com"\n}\n\nfirebase = pyrebaselite.initialize_app(config)\n```\n\nWe can optionally add a [service account credential](https://firebase.google.com/docs/server/setup#prerequisites) to our\nconfiguration that will allow our server to authenticate with Firebase as an admin and disregard any security rules.\n\n```python\nimport pyrebaselite\n\nconfig = {\n    "apiKey": "apiKey",\n    "authDomain": "projectId.firebaseapp.com",\n    "databaseURL": "https://databaseName.firebaseio.com",\n    "storageBucket": "projectId.appspot.com",\n    "serviceAccount": "path/to/serviceAccountCredentials.json"\n}\n\nfirebase = pyrebaselite.initialize_app(config)\n```\n\nAdding a service account will authenticate as an admin by default for all database queries, check out the\n[Authentication documentation](#authentication) for how to authenticate users.\n\n### Use Services\n\nA Pyrebase app can use multiple Firebase services.\n\n```firebase.auth()``` - [Authentication](#authentication)\n\n```firebase.database()``` - [Database](#database)\n\n```firebase.storage()``` - [Storage](#storage)\n\nCheck out the documentation for each service for further details.\n\n## Authentication\n\nThe ```sign_in_with_email_and_password()``` method will return user data including a token you can use to adhere to security rules.\n\nEach of the following methods accepts a user token: ```get()```, ```push()```, ```set()```, ```update()```, ```remove()``` and ```stream()```.\n\n```python\n# Get a reference to the auth service\nauth = firebase.auth()\n\n# Log the user in\nuser = auth.sign_in_with_email_and_password(email, password)\n\n# Log the user in anonymously\nuser = auth.sign_in_anonymous()\n\n# Add user info\nuser = auth.update_profile(display_name, photo_url, delete_attribute)\n\n# Get user info\nuser = auth.get_account_info()\n\n# Get a reference to the database service\ndb = firebase.database()\n\n# data to save\ndata = {\n    "name": "Mortimer \'Morty\' Smith"\n}\n\n# Pass the user\'s idToken to the push method\nresults = db.child("users").push(data, user[\'idToken\'])\n```\n\n### Token expiry\n\nA user\'s idToken expires after 1 hour, so be sure to use the user\'s refreshToken to avoid stale tokens.\n\n```\nuser = auth.sign_in_with_email_and_password(email, password)\n# before the 1 hour expiry:\nuser = auth.refresh(user[\'refreshToken\'])\n# now we have a fresh token\nuser[\'idToken\']\n```\n\n### Manage Users\n\n#### Creating users\n\n```python\nauth.create_user_with_email_and_password(email, password)\n```\n\nNote: Make sure you have the Email/password provider enabled in your Firebase dashboard under Auth -> Sign In Method.\n\n#### Verifying emails\n\n```python\nauth.send_email_verification(user[\'idToken\'])\n```\n\n#### Sending password reset emails\n\n```python\nauth.send_password_reset_email("email")\n```\n\n#### Get account information\n\n```python\nauth.get_account_info(user[\'idToken\'])\n```\n\n#### Refreshing tokens\n\n```python\nuser = auth.refresh(user[\'refreshToken\'])\n```\n\n#### Delete account\n\n```python\nauth.delete_user_account(user[\'idToken\'])\n```\n\n## Database\n\nYou can build paths to your data by using the ```child()``` method.\n\n```python\ndb = firebase.database()\ndb.child("users").child("Morty")\n```\n\n### Save Data\n\n#### push\n\nTo save data with a unique, auto-generated, timestamp-based key, use the ```push()``` method.\n\n```python\ndata = {"name": "Mortimer \'Morty\' Smith"}\ndb.child("users").push(data)\n```\n\n#### set\n\nTo create your own keys use the ```set()``` method. The key in the example below is "Morty".\n\n```python\ndata = {"name": "Mortimer \'Morty\' Smith"}\ndb.child("users").child("Morty").set(data)\n```\n\n#### update\n\nTo update data for an existing entry use the ```update()``` method.\n\n```python\ndb.child("users").child("Morty").update({"name": "Mortiest Morty"})\n```\n\n#### remove\n\nTo delete data for an existing entry use the ```remove()``` method.\n\n```python\ndb.child("users").child("Morty").remove()\n```\n\n#### multi-location updates\n\nYou can also perform [multi-location updates](https://www.firebase.com/blog/2015-09-24-atomic-writes-and-more.html) with the ```update()``` method.\n\n```python\ndata = {\n    "users/Morty/": {\n        "name": "Mortimer \'Morty\' Smith"\n    },\n    "users/Rick/": {\n        "name": "Rick Sanchez"\n    }\n}\n\ndb.update(data)\n```\n\nTo perform multi-location writes to new locations we can use the ```generate_key()``` method.\n\n```python\ndata = {\n    "users/"+ref.generate_key(): {\n        "name": "Mortimer \'Morty\' Smith"\n    },\n    "users/"+ref.generate_key(): {\n        "name": "Rick Sanchez"\n    }\n}\n\ndb.update(data)\n```\n\n#### Conditional Requests\n\nIt\'s possible to do conditional sets and removes by using the `conditional_set()` and `conitional_remove()` methods respectively. You can read more about conditional requests in Firebase [here](https://firebase.google.com/docs/reference/rest/database/#section-conditional-requests).\n\nTo use these methods, you first get the ETag of a particular path by using the `get_etag()` method. You can then use that tag in your conditional request.\n\n```python\netag = db.child("users").child("Morty").get_etag()\ndata = {"name": "Mortimer \'Morty\' Smith"}\ndb.child("users").child("Morty").conditional_set(data, etag["ETag"])\n```\n\nIf the passed ETag does not match the ETag of the path in the database, the data will not be written, and both conditional request methods will return a single key-value pair with the new ETag to use of the following form:\n\n```json\n{ "ETag": "8KnE63B6HiKp67Wf3HQrXanujSM=", "value": "<current value>" }\n```\n\nHere\'s an example of checking whether or not a conditional removal was successful:\n\n```python\netag = db.child("users").child("Morty").get_etag()\nresponse = db.child("users").child("Morty").conditional_remove(etag["ETag"])\nif type(response) is dict and "ETag" in response:\n    etag = response["ETag"] # our ETag was out-of-date\nelse:\n    print("We removed the data successfully!")\n```\n\nHere\'s an example of looping to increase age by 1:\n\n```python\netag = db.child("users").child("Morty").child("age").get_etag()\nwhile type(etag) is dict and "ETag" in etag:\n    new_age = etag["value"] + 1\n    etag = db.child("users").child("Morty").child("age").conditional_set(new_age, etag["ETag"])\n```\n\n### Retrieve Data\n\n#### val\n\nQueries return a PyreResponse object. Calling ```val()``` on these objects returns the query data.\n\n```\nusers = db.child("users").get()\nprint(users.val()) # {"Morty": {"name": "Mortimer \'Morty\' Smith"}, "Rick": {"name": "Rick Sanchez"}}\n```\n\n#### key\n\nCalling ```key()``` returns the key for the query data.\n\n```\nuser = db.child("users").get()\nprint(user.key()) # users\n```\n\n#### each\n\nReturns a list of objects on each of which you can call ```val()``` and ```key()```.\n\n```\nall_users = db.child("users").get()\nfor user in all_users.each():\n    print(user.key()) # Morty\n    print(user.val()) # {name": "Mortimer \'Morty\' Smith"}\n```\n\n#### get\n\nTo return data from a path simply call the ```get()``` method.\n\n```python\nall_users = db.child("users").get()\n```\n\n#### Conditional Requests\n\nIt\'s possible to do conditional sets and removes by using the `conditional_set()` and `conitional_remove()` methods respectively. You can read more about conditional requests in Firebase [here](https://firebase.google.com/docs/reference/rest/database/#section-conditional-requests).\n\nTo use these methods, you first get the ETag of a particular path by using the `get_etag()` method. You can then use that tag in your conditional request.\n\n```python\netag = db.child("users").child("Morty").get_etag()\ndata = {"name": "Mortimer \'Morty\' Smith"}\ndb.child("users").child("Morty").conditional_set(data, etag)\n```\n\nIf the passed ETag does not match the ETag of the path in the database, the data will not be written, and both conditional request methods will return a single key-value pair with the new ETag to use of the following form:\n\n```json\n{ "ETag": "8KnE63B6HiKp67Wf3HQrXanujSM=" }\n```\n\nHere\'s an example of checking whether or not a conditional removal was successful:\n\n```python\netag = db.child("users").child("Morty").get_etag()\nresponse = db.child("users").child("Morty").conditional_remove(etag)\n\nif "ETag" in response:\n    etag = response["ETag"] # our ETag was out-of-date\nelse:\n    print("We removed the data successfully!")\n```\n\n#### shallow\n\nTo return just the keys at a particular path use the ```shallow()``` method.\n\n```python\nall_user_ids = db.child("users").shallow().get()\n```\n\nNote: ```shallow()``` can not be used in conjunction with any complex queries.\n\n#### streaming\n\nYou can listen to live changes to your data with the ```stream()``` method.\n\n```python\ndef stream_handler(message):\n    print(message["event"]) # put\n    print(message["path"]) # /-K7yGTTEp7O549EzTYtI\n    print(message["data"]) # {\'title\': \'Pyrebase\', "body": "etc..."}\n\nmy_stream = db.child("posts").stream(stream_handler)\n```\n\nYou should at least handle `put` and `patch` events. Refer to ["Streaming from the REST API"][streaming] for details.\n\nYou can also add a ```stream_id``` to help you identify a stream if you have multiple running:\n\n```\nmy_stream = db.child("posts").stream(stream_handler, stream_id="new_posts")\n```\n\n#### close the stream\n\n```python\nmy_stream.close()\n```\n\n### Complex Queries\n\nQueries can be built by chaining multiple query parameters together.\n\n```python\nusers_by_name = db.child("users").order_by_child("name").limit_to_first(3).get()\n```\n\nThis query will return the first three users ordered by name.\n\n#### order_by_child\n\nWe begin any complex query with ```order_by_child()```.\n\n```python\nusers_by_name = db.child("users").order_by_child("name").get()\n```\n\nThis query will return users ordered by name.\n\n#### equal_to\n\nReturn data with a specific value.\n\n```python\nusers_by_score = db.child("users").order_by_child("score").equal_to(10).get()\n```\n\nThis query will return users with a score of 10.\n\n#### start_at and end_at\n\nSpecify a range in your data.\n\n```python\nusers_by_score = db.child("users").order_by_child("score").start_at(3).end_at(10).get()\n```\n\nThis query returns users ordered by score and with a score between 3 and 10.\n\n#### limit_to_first and limit_to_last\n\nLimits data returned.\n\n```python\nusers_by_score = db.child("users").order_by_child("score").limit_to_first(5).get()\n```\n\nThis query returns the first five users ordered by score.\n\n#### order_by_key\n\nWhen using ```order_by_key()``` to sort your data, data is returned in ascending order by key.\n\n```python\nusers_by_key = db.child("users").order_by_key().get()\n```\n\n#### order_by_value\n\nWhen using ```order_by_value()```, children are ordered by their value.\n\n```python\nusers_by_value = db.child("users").order_by_value().get()\n```\n\n## Storage\n\nThe storage service allows you to upload images to Firebase.\n\n### child\n\nJust like with the Database service, you can build paths to your data with the Storage service.\n\n```python\nstorage.child("images/example.jpg")\n```\n\n### put\n\nThe put method takes the path to the local file and an optional user token.\n\n```python\nstorage = firebase.storage()\n# as admin\nstorage.child("images/example.jpg").put("example2.jpg")\n# as user\nstorage.child("images/example.jpg").put("example2.jpg", user[\'idToken\'])\n```\n\n### download\n\nThe download method takes the path to the saved database file and the name you want the downloaded file to have.\n\n```\nstorage.child("images/example.jpg").download("downloaded.jpg")\n```\n\n### get_url\n\nThe get_url method takes the path to the saved database file and user token which returns the storage url.\n\n```\nstorage.child("images/example.jpg").get_url(user["idToken"])\n# https://firebasestorage.googleapis.com/v0/b/storage-url.appspot.com/o/images%2Fexample.jpg?alt=media\n```\n\n### delete\n\nThe delete method takes the path to the saved database file and user token.\n\n```\nstorage.delete("images/example.jpg",user["idToken"])\n```\n\n### Helper Methods\n\n#### generate_key\n\n```db.generate_key()``` is an implementation of Firebase\'s [key generation algorithm](https://www.firebase.com/blog/2015-02-11-firebase-unique-identifiers.html).\n\nSee multi-location updates for a potential use case.\n\n#### sort\n\nSometimes we might want to sort our data multiple times. For example, we might want to retrieve all articles written between a\ncertain date then sort those articles based on the number of likes.\n\nCurrently the REST API only allows us to sort our data once, so the ```sort()``` method bridges this gap.\n\n```python\narticles = db.child("articles").order_by_child("date").start_at(startDate).end_at(endDate).get()\narticles_by_likes = db.sort(articles, "likes")\n```\n\n### Common Errors\n\n#### Index not defined\n\n+Indexing is [not enabled](https://firebase.google.com/docs/database/security/indexing-data) for the database reference.\n\n[streaming]: https://firebase.google.com/docs/reference/rest/database/#section-streaming\n',
    'author': 'kengoon',
    'author_email': 'kengoon19@gmail.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'None',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.7,<4.0',
}


setup(**setup_kwargs)
