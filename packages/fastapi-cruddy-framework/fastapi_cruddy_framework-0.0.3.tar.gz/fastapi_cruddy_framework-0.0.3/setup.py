# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['fastapi_cruddy_framework']

package_data = \
{'': ['*']}

install_requires = \
['SQLAlchemy-Utils>=0.38.3,<0.39.0',
 'SQLAlchemy>=1.4.40,<2.0.0',
 'fastapi[all]>=0.92.0,<0.93.0',
 'inflect>=6.0.2,<7.0.0',
 'sqlmodel>=0.0.8,<0.0.9',
 'uvicorn>=0.20.0,<0.21.0']

entry_points = \
{'console_scripts': ['start_sqlite = '
                     'examples.fastapi_cruddy_sqlite.main:local_start']}

setup_kwargs = {
    'name': 'fastapi-cruddy-framework',
    'version': '0.0.3',
    'description': 'A holistic CRUD/MVC framework for FastAPI, with endpoint policies and relationships',
    'long_description': '<a name="readme-top"></a>\n\n<!-- PROJECT LOGO -->\n<div align="center">\n  <h2 align="center">FastAPI - Cruddy Framework</h2>\n  <a href="https://github.com/mdconaway/fastapi-cruddy-framework">\n    <img src="https://raw.githubusercontent.com/mdconaway/fastapi-cruddy-framework/master/logo.png" alt="Logo">\n  </a>\n  <br/>\n</div>\n\n<!-- ABOUT THE PROJECT -->\n## About Cruddy Framework\n\n[![Product Name Screen Shot][product-screenshot]](https://github.com/mdconaway/fastapi-cruddy-framework)\n\n`fastapi-cruddy-framework` is a companion library to FastAPI designed to bring the development productivity of Ruby on Rails, Ember.js or Sails.js to the FastAPI ecosystem. Many of the design patterns base themselves on Sails.js "policies," sails-ember-rest automatic CRUD routing, and Ember.js REST-Adapter feature sets. By default, data sent to and from the auto-magic CRUD routes are expected to conform to the Ember.js Rest Envelope / Linked-data specification. This specification is highly readable for front-end developers, allows for an expressive over-the-wire query syntax, and embeds self-describing relationship URL links in each over-the-wire record to help data stores automatically generate requests to fetch or update related records. This library is still in an alpha/beta phase, so use at your own risk. All CRUD actions and relationship types are currently supported, though there may be unexpected bugs. Please report any bugs under "issues."\n\n\nTODO: All the documentation and E2E tests. Maybe more comments. Maybe more features.\n\nSee the examples folder for a quick reference of high level setup. It currently contains a fully functional fastapi server which uses fastapi-cruddy-framework and the sqlite adapter. It even shows how to override incoming post data to do things like hash a user\'s password during initial registration using a simple drop-in policy function.\n\n<p align="right">(<a href="#readme-top">back to top</a>)</p>\n\n<!-- ABOUT THE PROJECT -->\n## Installation\n\nThe fastapi-cruddy-framework module can be installed using poetry...\n\n```\npoetry add fastapi-cruddy-framework\n```\n\nOr pip.\n\n```\npip install fastapi-cruddy-framework\n```\n\nAfter that, you can import and use all of the classes outlined below.\n\n<p align="right">(<a href="#readme-top">back to top</a>)</p>\n\n<!-- CLASSES -->\n## Cruddy Exports/Imports\n\nCruddy-framework provides users the following classes and helper functions to scaffold out a project. (For recommended project structure, see the "examples" folder in the Github repo)\n\n```python\n# MASTER ROUTER GENERATOR\nCreateRouterFromResources\n# RESOURCE AND REGISTRY\nResource\nResourceRegistry\nCruddyResourceRegistry\n# CONTROLLER HELPERS\nControllerCongifurator\n# REPOSITORY\nAbstractRepository\n# DATABASE ADAPTERS\nBaseAdapter\nSqliteAdapter\nMysqlAdapter\nPostgresqlAdapter\n# TYPES / MODELS / SCHEMAS\nT\nUUID\nRelationshipConfig\nCruddyGenericModel\nBulkDTO,\nMetaObject\nPageResponse\nResponseSchema\nCruddyModel\nCruddyIntIDModel\nCruddyUUIDModel\nExampleUpdate\nExampleCreate\nExampleView\nExample\n# MODULE LOADER HELPERS\ngetModuleDir\ngetDirectoryModules\n# HELPERS\npluralizer\nuuid6\nuuid7\n```\n\n<p align="right">(<a href="#readme-top">back to top</a>)</p>\n\n<!-- CreateRouterFromResources -->\n### CreateRouterFromResources\n\nThis instance factory creates and returns a fully-wired fastapi `APIRouter` which sub-routes all `Resource` instances created in your project. Theoretically, you can create and mount multiple routers this way, but each router needs to be provided all of the `Resource` instances required to fully resolve the relationships it may care about. The recommended way to structure your project is to keep all resources required for a route set contained within a single folder. This factory is then provided the relative path to a resource set folder, starting with your application\'s `main` module, and will return the fully interconnected route set while also instantiating all of your resource modules. Typically, it is a good idea to import all of your router instances in your main module, as they will need to be "connected" to your fastapi server <i>WITHIN</i> the `startup` hook. This is critical, as the resource registry (discussed below) cannot fully resolve relationships until after SQLAlchemy is aware of all models. This occurs in-between launching your main module and the `startup` hook.\n\nExample:\n```python\nimport my_app\nfrom fastapi_cruddy_framework import CreateRouterFromResources\nfrom fastapi import FastAPI, APIRouter\n\n\nmy_router: APIRouter = CreateRouterFromResources(\n    # (REQUIRED) application_module is of "ModuleType" type, and should be a pointer to your main app module\n    application_module=my_app, \n    # (OPTIONAL) resource_path is of "str" type, and should specify a relative path from application_module\n    # to the location of your "resources" that will be auto-loaded and bundled under this router\n    # tree.\n    resource_path="resources",\n    # (OPTIONAL) common_resource_name is of "str" type, and should describe the common export value in each\n    # resource file where the router factory can find your "Resource" instances. Use this if you want to name\n    # all of your resource objects something other than "resource"\n    common_resource_name="resource"\n)\n\napp = FastAPI(title="My App", version="1")\n\n@app.on_event("startup")\nasync def bootstrap():\n  app.include_router(my_router)\n\n# fin!\n```\n\n<p align="right">(<a href="#readme-top">back to top</a>)</p>\n\n<!-- Resource -->\n### Resource\n\nThe `Resource` class is the fundamental building block of fastapi-cruddy-framework. Your resource instances define the union of your models, resource "controller" (which is a fastapi router with baked-in CRUD logic), business policies, repository abstraction layer, and database adapter. Fortunately for you, the user, everything is essentially ready-to-go out of the box. Like sails-ember-rest or Ruby on Rails, you can now focus all of your development time on creating reusable policies (which contain your business logic that lies just above your CRUD endpoints), defining your models, and extending your resource controllers to add one-off actions like "login" or "change password". All of your resources should be loaded by the router factory (above) to ensure that relationships and routes are resolved in the correct order. Don\'t forget, <b>only plug the master router into your application in the fastapi `startup`\xa0hook!</b>\n\n\n<b>Resource Nuances:</b>\n* Defining your policies is done at definition time!\n* Policies are run in the exact order in which they are included in the `List` sent to the resource definition.\n* `policies_universal` apply to ALL CRUD routes, and always run <i>BEFORE</i> action specific policy chains.\n* Action specific policies run <i>AFTER</i> all `policies_universal` have resolved successfully.\n* Each endpoint is protected by `policies_universal` + `policies_<action>`.\n* One-to-Many and Many-to-Many sub-routes (like /users/{id}/posts) will be protected by the policy chain: `user.policies_universal` + `user.policies_get_one` + `posts.policies_get_many`. Security, security, security!\n* Blocking user REST modification of certain relationships via the default CRUD controller is also done at definition time!\n* `protected_relationships` is a `List[str]` with each string indicating a one-to-many or many-to-many relationship that should not be allowed to update via the default CRUD actions.\n* You should define your application-wide adapter elsewhere and pass it into the resource instance.\n* Resources cannot span different databases.\n\n\n<b>Available Policy Chain Definitions:</b>\n* `policies_universal`\n* `policies_create`\n* `policies_update`\n* `policies_delete`\n* `policies_get_one`\n* `policies_get_many`\n\n\n<b>Available Relationship Blocks:</b>\n* `protected_relationships`\n\n\n<b>Updating Relationships</b>\n* You can update relationships via either CREATE or UPDATE actions against each base resource! \n\nAs you will discover, your resource\'s create and update models will automatically gain "shadow" properties where one-to-many and many-to-many relationships exist. These properties expect a client to send a list of IDs that specify the foreign records that relate to the target record. So - if a user is a member of many groups, and a group can have many users, you could update the users in a group by sending a property `"users": [1,2,3,4,5]` within the `group` payload object you send to the `POST /groups` or `PATCH /groups` routes/actions. It will all be clear when you look at the SWAGGER docs generated for your API.\n\n\nResource Definition Options (And Defaults!):\n```python\nid_type: Union[Type[int], Type[UUID]] = int,\n# You SHOULD pass in \'adapter\'\nadapter: Union[BaseAdapter, SqliteAdapter, MysqlAdapter, PostgresqlAdapter, None] = None,\n# The following adapter specific options will probably get removed. You don\'t need to pass them in.\nadapter_type: Literal["mysql", "postgresql"] = "postgresql",\ndb_mode: Literal["memory", "file"] = "memory",\ndb_path: Union[str, None] = None,\nconnection_uri="",\npool_size=4,\nmax_overflow=64,\n# link_prefix will be applied at the beginning of each relationship link on each record.\n# This can help with things like sub-domains, or CORS with your API, and will allow you \n# to point your relationships endpoints at a complete URL. You could pass in something like\n# https://api.mydomain.com, which would make a relationship link look like\n# https://api.mydomain.com/resource/{id}/relationship\nlink_prefix="",\n# Path specifies where this resource resides within the API. This is generated for you by\n# default. Only change if you know what you are doing. Ember.js would expect a resource path\n# to be the pluralized name of its base model. So a \'user\' resource should be accessible at \n# \'/users\', and all of its sub-routes and actions are nested under that route.\npath: str = None,\n# The "tags" list corresponds with the fastapi "tags" list. You can alter this if needed.\n# It is defined for you initially as the singular name of your resource model. User -> \'user\'\ntags: List[str] = None,\n# The next four options are mandatory. \'create_model\' specifies the inner schema that is \n# allowed to be sent to the create endpoint by a user. It will be auto-wrapped in a REST\n# envelope schema. \'update_model \' specifies the inner schema that is allowed to be sent \n# to the update endpoint by a user. It too will be auto-wrappted in a REST envelope schema.\n# \'resource_model\' is your base model, which includes all possible fields of your model and\n# has table=True specified. \'response_schema\' defines the fields of your model to return\n# to the client during all CRUD transactions. \'response_schema\' will be wrapped in REST\n# envelope in both single and many responses. Only \'resource_model\' should have a table!!\n# All of your models should descend from CruddyModel, which is a simple SQLModel class. \nresource_create_model: CruddyModel = ExampleCreate,\nresource_update_model: CruddyModel = ExampleUpdate,\nresource_model: CruddyModel = Example,\nresponse_schema: CruddyModel = ExampleView,\n# \'response_meta_schema\' allows you to remap the "meta" values returned to the client for\n# any paginated routes. You shouldn\'t NEED to change this, but you can if you want.\nresponse_meta_schema: CruddyGenericModel = MetaObject,\n# \'protected_relationships\' will ban-hammer relationship fields specified from gaining\n# an auto-magic update property. This will prevent users from creating or updating these\n# relationships via the default CRUD actions. You will need to build other business logic\n# to manage creating or changing protected relationships elsewhere in your application.\n# Protected relationships will still be viewable at their designated GET routes.\nprotected_relationships: List[str] = [],\n# The remaining options allow you to pass in your Sails.js-like policy chains, which will\n# run before all of your endpoints (in the case of universal), or in front of only specific \n# endpoints that match the action specified. These policies can be used for nearly any purpose,\n# from triggering other APIs and services, protecting endpoints to ensure only the correct\n# users can alter data, or to intercept and even modify data before it gets to a default CRUD\n# action! (Like hashing a user\'s password based on the plain-text password they send to register)\npolicies_universal: List[Callable] = [],\npolicies_create: List[Callable] = [],\npolicies_update: List[Callable] = [],\npolicies_delete: List[Callable] = [],\npolicies_get_one: List[Callable] = [],\npolicies_get_many: List[Callable] = [],\n```\n\n\nBelow is an example for creating a `user` resource. The best way to organize your app would be to place the definition for your user resource in a folder like `my_app/resources/user.py`, where the name of your application is `my_app`. As you saw earlier in the description for `CreateRouterFromResources` you would then load this user resource file by simply specifying `application_module=my_app` and `resource_path="resources"`. Your `fastapi-cruddy-framework` project would then auto-magically load your resource file(s), create dynamic routes to create, read, update, and delete this resource, and further create sub-routes within this resource to browse, query and update all of the relationships for your resource.\n\nExample:\n```python\nfrom fastapi_cruddy_framework import Resource, UUID\nfrom my_app.adapters import sqlite\nfrom my_app.models.user import (\n    User,\n    UserCreate,\n    UserUpdate,\n    UserView,\n)\nfrom my_app.schemas.response import MetaObject\nfrom my_app.policies.verify_session import verify_session\nfrom my_app.policies.hash_user_password import (\n    hash_user_password,\n)\n\n\nresource = Resource(\n    id_type=UUID,\n    adapter=sqlite,\n    resource_update_model=UserUpdate,\n    resource_create_model=UserCreate,\n    resource_model=User,\n    response_schema=UserView,\n    response_meta_schema=MetaObject,\n    protected_relationships=["posts"],\n    policies_universal=[verify_session],\n    policies_create=[hash_user_password],\n)\n\n# fin!\n```\n\nEasy, right?\n\n<p align="right">(<a href="#readme-top">back to top</a>)</p>\n\n<!-- ResourceRegistry -->\n### ResourceRegistry\n\nThe `ResourceRegistry` class should be invisible to the average user. There are no input parameters when creating a registry, and by default Cruddy defines its own library-internal registry. The registry exists to perform the following functions:\n\n* Maintain a map of all resources available to `fastapi-cruddy-framework`\n* Trigger `resolve` for all resources after SQL Alchemy finishes computing the relationship properties on each SQLModel.\n* Plugin to the `Resource` class, so that each `Resource` you define can automatically call `ResourceRegistry.register()` when you define it. This is all "under the hood".\n\n\n<p align="right">(<a href="#readme-top">back to top</a>)</p>\n\n<!-- CruddyResourceRegistry -->\n### CruddyResourceRegistry\n\nThe `CruddyResourceRegistry` is a library-internal instance of the `ResourceRegistry` class. It manages all of the resources Cruddy is a ware of. Maybe don\'t touch this. Or do, if you like to live dangerously.\n\n<p align="right">(<a href="#readme-top">back to top</a>)</p>\n\n<!-- ControllerCongifurator -->\n### ControllerCongifurator\n\nThe `ControllerCongifurator` is a configuration function invoked by the `Resource` class after SQL Alchemy has resolved all model relationships. You shouldn\'t need to interact with this function, but if you\'re a super advanced user, or wunderkind, maybe you will find a reason to need this. In essence, this function builds out all of the basic CRUD logic for a resource, after the resource has constructed a repository and generated the shadow schemas for your models. This is where your CRUD routes and sub-routes are auto-magically configured.\n\nThe controller/router configured by each of your `Resource` objects will allow the base resource or its relationships to be queried from the client via an arbitrarily complex `where` object (JSON encoded query parameter). \n\nInvalid attributes or ops are just dropped. (May change in the future)\n\nImprovements that will be made in the near future:\n1. Conditional table joins for relationships to...\n2. Make resources searchable with joined relationships via dot notation!\n3. Maybe throw an error if a bad search field is sent? (Will help UI devs)\n\nClients can build an arbitrarily deep query with a JSON dictionary, sent via a query parameter in a JSON object that generally contains all possible filter operators along with "and," "or," and "not" conditions. \n\nField level and boolean operators begin with a * character. This will nearly always translate down to the sqlalchemy level, where it is up to the model class to determine what operations are possible on each model attribute. The top level query of a `where` object is an implicit AND. To do an OR, the base key of the search must be `*or`, as in the below examples:\n\n`/resource?where={"*or":{"first_name":"bilbo","last_name":"baggins"}}`\n\n`/resource/{id}/relationship?where={"*or":{"first_name":{"*contains":"bilbo"},"last_name":"baggins"}}`\n\n`/resource?where={"*or":{"first_name":{"*endswith":"bilbo"},"last_name":"baggins","*and":{"email":{"*contains":"@"},"first_name":{"*contains":"helga"}}}}`\n\n`/resource?where={"*or":{"first_name":{"*endswith":"bilbo"},"last_name":"baggins","*and":[{"email":{"*contains":"@"}},{"email":{"*contains":"helga"}}]}}`\n\n\nThe following query would be an implicit *and:\n\n`/resource?where=[{"first_name":{"*endswith":"bilbo"}},{"last_name":"baggins"}]`\n\n\nAs would the following query:\n\n`/resource/{id}/relationship?where={"first_name":{"*endswith":"bilbo"},"last_name":"baggins"}`\n\n\n<p align="right">(<a href="#readme-top">back to top</a>)</p>\n\n<!-- AbstractRepository -->\n## AbstractRepository\n\nThe `AbstractRepository` is a helpful way to interact with the data layer of your models. It contains all of the underlying functions that the `Resource` and `Controller` objects use to query, create, update, and delete your database information. Each `Resource` you define will automatically create an `AbstractRepository` instance that manages it. This can be accessed in your application at `your_resource_instance.repository`. The methods available to you via this repository instance are:\n\n```python\n# User functions accessible from any resource\'s \'AbstractRepository\'\nasync def create(data: CruddyModel)\n\nasync def get_by_id(id: Union[UUID, int])\n\nasync def update(id: Union[UUID, int], data: CruddyModel)\n\nasync def delete(id: Union[UUID, int])\n\nasync def get_all(page: int = 1, limit: int = 10, columns: List[str] = None, sort: List[str] = None, where: Json = None)\n\nasync def get_all_relations(id: Union[UUID, int] = ..., relation: str = ..., relation_model: CruddyModel = ..., page: int = 1, limit: int = 10, columns: List[str] = None, sort: List[str] = None, where: Json = None)\n\nasync def set_many_many_relations(id: Union[UUID, int], relation: str = ..., relations: List[Union[UUID, int]] = ...)\n\nasync def set_one_many_relations(id: Union[UUID, int], relation: str = ..., relations: List[Union[UUID, int]] = ...)\n```\n\nGenerally, these functions do about what you would expect them to do. More documentation will be added to describe their function soon. Please read nuances below, however, as it applies to how x-to-Many relationships are managed via the automatic CRUD routes.\n\n\n<b>Important AbstractRepository Nuances</b>\n\n* `set_many_many_relations` and `set_one_many_relations` both destroy and then re-create the x-to-Many relationships they target. If a `user` with the id of 1 was a member of `groups` 1, 2, and 3, then calling `await user_repository.set_many_many_relations(1, \'groups\', [4,5,6])` would result in `user` 1 being a member of only groups 4,5, and 6 after execution. Client applications should be aware of this functionality, and always send ALL relationships that should still exist during any relational updates.\n\n\n<p align="right">(<a href="#readme-top">back to top</a>)</p>\n\n<!-- LICENSE -->\n## License\n\nDistributed under the MIT License. See `LICENSE` for more information.\n\n<p align="right">(<a href="#readme-top">back to top</a>)</p>\n\n<!-- MARKDOWN LINKS & IMAGES -->\n[product-screenshot]: https://raw.githubusercontent.com/mdconaway/fastapi-cruddy-framework/master/screenshot.png',
    'author': 'mdconaway',
    'author_email': 'mdconaway@users.noreply.github.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/mdconaway/fastapi-cruddy-framework',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.10,<4.0',
}


setup(**setup_kwargs)
