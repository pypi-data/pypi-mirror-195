
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\plot_pipeline_lightgbm.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_pipeline_lightgbm.py>`
        to download the full example code or to run this example in your browser via Binder

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_pipeline_lightgbm.py:


.. _example-lightgbm-pipe:

Convert a pipeline with a LightGbm model
========================================

.. index:: LightGbm

*sklearn-onnx* only converts *scikit-learn* models into *ONNX*
but many libraries implement *scikit-learn* API so that their models
can be included in a *scikit-learn* pipeline. This example considers
a pipeline including a *LightGbm* model. *sklearn-onnx* can convert
the whole pipeline as long as it knows the converter associated to
a *LGBMClassifier*. Let's see how to do it.

.. contents::
    :local:

Train a LightGBM classifier
+++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 25-59

.. code-block:: default

    import lightgbm
    import onnxmltools
    import skl2onnx
    import onnx
    import sklearn
    import matplotlib.pyplot as plt
    import os
    from onnx.tools.net_drawer import GetPydotGraph, GetOpNodeProducer
    import onnxruntime as rt
    from onnxruntime.capi.onnxruntime_pybind11_state import Fail as OrtFail
    from skl2onnx import convert_sklearn, update_registered_converter
    from skl2onnx.common.shape_calculator import calculate_linear_classifier_output_shapes  # noqa
    from onnxmltools.convert.lightgbm.operator_converters.LightGbm import convert_lightgbm  # noqa
    import onnxmltools.convert.common.data_types
    from skl2onnx.common.data_types import FloatTensorType
    import numpy
    from sklearn.datasets import load_iris
    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler
    from lightgbm import LGBMClassifier

    data = load_iris()
    X = data.data[:, :2]
    y = data.target

    ind = numpy.arange(X.shape[0])
    numpy.random.shuffle(ind)
    X = X[ind, :].copy()
    y = y[ind].copy()

    pipe = Pipeline([('scaler', StandardScaler()),
                     ('lgbm', LGBMClassifier(n_estimators=3))])
    pipe.fit(X, y)



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "D:\GitHub\onnx\sklearn-onnx\docs\examples\plot_pipeline_lightgbm.py", line 26, in <module>
        import onnxmltools
      File "D:\Program Files\Python\Python39\lib\site-packages\onnxmltools\__init__.py", line 25, in <module>
        from .utils import load_model
      File "D:\Program Files\Python\Python39\lib\site-packages\onnxmltools\utils\__init__.py", line 10, in <module>
        from .float16_converter import convert_float_to_float16
      File "D:\Program Files\Python\Python39\lib\site-packages\onnxmltools\utils\float16_converter.py", line 4, in <module>
        from onnxconverter_common.auto_mixed_precision import *  # noqa
    ModuleNotFoundError: No module named 'onnxconverter_common.auto_mixed_precision'




.. GENERATED FROM PYTHON SOURCE LINES 60-71

Register the converter for LGBMClassifier
+++++++++++++++++++++++++++++++++++++++++

The converter is implemented in *onnxmltools*:
`onnxmltools...LightGbm.py
<https://github.com/onnx/onnxmltools/blob/master/onnxmltools/convert/
lightgbm/operator_converters/LightGbm.py>`_.
and the shape calculator:
`onnxmltools...Classifier.py
<https://github.com/onnx/onnxmltools/blob/master/onnxmltools/convert/
lightgbm/shape_calculators/Classifier.py>`_.

.. GENERATED FROM PYTHON SOURCE LINES 73-74

Then we import the converter and shape calculator.

.. GENERATED FROM PYTHON SOURCE LINES 76-77

Let's register the new converter.

.. GENERATED FROM PYTHON SOURCE LINES 77-82

.. code-block:: default

    update_registered_converter(
        LGBMClassifier, 'LightGbmLGBMClassifier',
        calculate_linear_classifier_output_shapes, convert_lightgbm,
        options={'nocl': [True, False], 'zipmap': [True, False, 'columns']})


.. GENERATED FROM PYTHON SOURCE LINES 83-85

Convert again
+++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 85-95

.. code-block:: default


    model_onnx = convert_sklearn(
        pipe, 'pipeline_lightgbm',
        [('input', FloatTensorType([None, 2]))],
        target_opset={'': 12, 'ai.onnx.ml': 2})

    # And save.
    with open("pipeline_lightgbm.onnx", "wb") as f:
        f.write(model_onnx.SerializeToString())


.. GENERATED FROM PYTHON SOURCE LINES 96-100

Compare the predictions
+++++++++++++++++++++++

Predictions with LightGbm.

.. GENERATED FROM PYTHON SOURCE LINES 100-104

.. code-block:: default


    print("predict", pipe.predict(X[:5]))
    print("predict_proba", pipe.predict_proba(X[:1]))


.. GENERATED FROM PYTHON SOURCE LINES 105-106

Predictions with onnxruntime.

.. GENERATED FROM PYTHON SOURCE LINES 106-119

.. code-block:: default


    try:
        sess = rt.InferenceSession("pipeline_lightgbm.onnx")
    except OrtFail as e:
        print(e)
        print("The converter requires onnxmltools>=1.7.0")
        sess = None

    if sess is not None:
        pred_onx = sess.run(None, {"input": X[:5].astype(numpy.float32)})
        print("predict", pred_onx[0])
        print("predict_proba", pred_onx[1][:1])


.. GENERATED FROM PYTHON SOURCE LINES 120-122

Display the ONNX graph
++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 122-137

.. code-block:: default


    pydot_graph = GetPydotGraph(
        model_onnx.graph, name=model_onnx.graph.name, rankdir="TB",
        node_producer=GetOpNodeProducer(
            "docstring", color="yellow",
            fillcolor="yellow", style="filled"))
    pydot_graph.write_dot("pipeline.dot")

    os.system('dot -O -Gdpi=300 -Tpng pipeline.dot')

    image = plt.imread("pipeline.dot.png")
    fig, ax = plt.subplots(figsize=(40, 20))
    ax.imshow(image)
    ax.axis('off')


.. GENERATED FROM PYTHON SOURCE LINES 138-139

**Versions used for this example**

.. GENERATED FROM PYTHON SOURCE LINES 139-147

.. code-block:: default


    print("numpy:", numpy.__version__)
    print("scikit-learn:", sklearn.__version__)
    print("onnx: ", onnx.__version__)
    print("onnxruntime: ", rt.__version__)
    print("skl2onnx: ", skl2onnx.__version__)
    print("onnxmltools: ", onnxmltools.__version__)
    print("lightgbm: ", lightgbm.__version__)


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.088 seconds)


.. _sphx_glr_download_auto_examples_plot_pipeline_lightgbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example


  .. container:: binder-badge

    .. image:: images/binder_badge_logo.svg
      :target: https://mybinder.org/v2/gh/onnx/onnx.ai/sklearn-onnx//master?filepath=auto_examples/auto_examples/plot_pipeline_lightgbm.ipynb
      :alt: Launch binder
      :width: 150 px


  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_pipeline_lightgbm.py <plot_pipeline_lightgbm.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_pipeline_lightgbm.ipynb <plot_pipeline_lightgbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
