# coding: utf-8

"""
    Flywheel

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


## NOTE: This file is auto generated by the swagger code generator program.
## Do not edit the file manually.

import pprint
import re  # noqa: F401

import six

from flywheel.models.analysis_parents import AnalysisParents  # noqa: F401,E501
from flywheel.models.container_reference import ContainerReference  # noqa: F401,E501
from flywheel.models.gear_info import GearInfo  # noqa: F401,E501
from flywheel.models.note import Note  # noqa: F401,E501

# NOTE: This file is auto generated by the swagger code generator program.
# Do not edit the class manually.


class Analysis(object):

    swagger_types = {
        'created': 'datetime',
        'modified': 'datetime',
        'timestamp': 'datetime',
        'revision': 'int',
        'description': 'str',
        'info': 'object',
        'label': 'str',
        'parent': 'ContainerReference',
        'parents': 'AnalysisParents',
        'job_id': 'str',
        'job': 'union[Job,string]',
        'compute_provider_id': 'str',
        'notes': 'list[Note]',
        'tags': 'list[str]',
        'id': 'str',
        'gear_info': 'GearInfo',
        'copy_of': 'str',
        'original_copy_of': 'str',
        'deleted': 'datetime'
    }

    attribute_map = {
        'created': 'created',
        'modified': 'modified',
        'timestamp': 'timestamp',
        'revision': 'revision',
        'description': 'description',
        'info': 'info',
        'label': 'label',
        'parent': 'parent',
        'parents': 'parents',
        'job_id': 'job_id',
        'job': 'job',
        'compute_provider_id': 'compute_provider_id',
        'notes': 'notes',
        'tags': 'tags',
        'id': '_id',
        'gear_info': 'gear_info',
        'copy_of': 'copy_of',
        'original_copy_of': 'original_copy_of',
        'deleted': 'deleted'
    }

    rattribute_map = {
        'created': 'created',
        'modified': 'modified',
        'timestamp': 'timestamp',
        'revision': 'revision',
        'description': 'description',
        'info': 'info',
        'label': 'label',
        'parent': 'parent',
        'parents': 'parents',
        'job_id': 'job_id',
        'job': 'job',
        'compute_provider_id': 'compute_provider_id',
        'notes': 'notes',
        'tags': 'tags',
        '_id': 'id',
        'gear_info': 'gear_info',
        'copy_of': 'copy_of',
        'original_copy_of': 'original_copy_of',
        'deleted': 'deleted'
    }

    def __init__(self, created=None, modified=None, timestamp=None, revision=1, description='', info=None, label=None, parent=None, parents=None, job_id=None, job=None, compute_provider_id=None, notes=None, tags=None, id=None, gear_info=None, copy_of=None, original_copy_of=None, deleted=None):  # noqa: E501
        """Analysis - a model defined in Swagger"""
        super(Analysis, self).__init__()

        self._created = None
        self._modified = None
        self._timestamp = None
        self._revision = None
        self._description = None
        self._info = None
        self._label = None
        self._parent = None
        self._parents = None
        self._job_id = None
        self._job = None
        self._compute_provider_id = None
        self._notes = None
        self._tags = None
        self._id = None
        self._gear_info = None
        self._copy_of = None
        self._original_copy_of = None
        self._deleted = None
        self.discriminator = None
        self.alt_discriminator = None

        self.created = created
        self.modified = modified
        if timestamp is not None:
            self.timestamp = timestamp
        if revision is not None:
            self.revision = revision
        if description is not None:
            self.description = description
        if info is not None:
            self.info = info
        self.label = label
        self.parent = parent
        self.parents = parents
        if job_id is not None:
            self.job_id = job_id
        if job is not None:
            self.job = job
        if compute_provider_id is not None:
            self.compute_provider_id = compute_provider_id
        self.notes = notes
        self.tags = tags
        self.id = id
        if gear_info is not None:
            self.gear_info = gear_info
        if copy_of is not None:
            self.copy_of = copy_of
        if original_copy_of is not None:
            self.original_copy_of = original_copy_of
        if deleted is not None:
            self.deleted = deleted

    @property
    def created(self):
        """Gets the created of this Analysis.


        :return: The created of this Analysis.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Analysis.


        :param created: The created of this Analysis.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Analysis.


        :return: The modified of this Analysis.
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Analysis.


        :param modified: The modified of this Analysis.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def timestamp(self):
        """Gets the timestamp of this Analysis.


        :return: The timestamp of this Analysis.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this Analysis.


        :param timestamp: The timestamp of this Analysis.  # noqa: E501
        :type: datetime
        """

        self._timestamp = timestamp

    @property
    def revision(self):
        """Gets the revision of this Analysis.


        :return: The revision of this Analysis.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Analysis.


        :param revision: The revision of this Analysis.  # noqa: E501
        :type: int
        """

        self._revision = revision

    @property
    def description(self):
        """Gets the description of this Analysis.


        :return: The description of this Analysis.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Analysis.


        :param description: The description of this Analysis.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def info(self):
        """Gets the info of this Analysis.


        :return: The info of this Analysis.
        :rtype: object
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this Analysis.


        :param info: The info of this Analysis.  # noqa: E501
        :type: object
        """

        self._info = info

    @property
    def label(self):
        """Gets the label of this Analysis.


        :return: The label of this Analysis.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Analysis.


        :param label: The label of this Analysis.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def parent(self):
        """Gets the parent of this Analysis.


        :return: The parent of this Analysis.
        :rtype: ContainerReference
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this Analysis.


        :param parent: The parent of this Analysis.  # noqa: E501
        :type: ContainerReference
        """

        self._parent = parent

    @property
    def parents(self):
        """Gets the parents of this Analysis.


        :return: The parents of this Analysis.
        :rtype: AnalysisParents
        """
        return self._parents

    @parents.setter
    def parents(self, parents):
        """Sets the parents of this Analysis.


        :param parents: The parents of this Analysis.  # noqa: E501
        :type: AnalysisParents
        """

        self._parents = parents

    @property
    def job_id(self):
        """Gets the job_id of this Analysis.


        :return: The job_id of this Analysis.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this Analysis.


        :param job_id: The job_id of this Analysis.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def job(self):
        """Gets the job of this Analysis.


        :return: The job of this Analysis.
        :rtype: union[Job,string]
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this Analysis.


        :param job: The job of this Analysis.  # noqa: E501
        :type: union[Job,string]
        """

        self._job = job

    @property
    def compute_provider_id(self):
        """Gets the compute_provider_id of this Analysis.


        :return: The compute_provider_id of this Analysis.
        :rtype: str
        """
        return self._compute_provider_id

    @compute_provider_id.setter
    def compute_provider_id(self, compute_provider_id):
        """Sets the compute_provider_id of this Analysis.


        :param compute_provider_id: The compute_provider_id of this Analysis.  # noqa: E501
        :type: str
        """

        self._compute_provider_id = compute_provider_id

    @property
    def notes(self):
        """Gets the notes of this Analysis.


        :return: The notes of this Analysis.
        :rtype: list[Note]
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Analysis.


        :param notes: The notes of this Analysis.  # noqa: E501
        :type: list[Note]
        """

        self._notes = notes

    @property
    def tags(self):
        """Gets the tags of this Analysis.


        :return: The tags of this Analysis.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Analysis.


        :param tags: The tags of this Analysis.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def id(self):
        """Gets the id of this Analysis.


        :return: The id of this Analysis.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Analysis.


        :param id: The id of this Analysis.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def gear_info(self):
        """Gets the gear_info of this Analysis.


        :return: The gear_info of this Analysis.
        :rtype: GearInfo
        """
        return self._gear_info

    @gear_info.setter
    def gear_info(self, gear_info):
        """Sets the gear_info of this Analysis.


        :param gear_info: The gear_info of this Analysis.  # noqa: E501
        :type: GearInfo
        """

        self._gear_info = gear_info

    @property
    def copy_of(self):
        """Gets the copy_of of this Analysis.


        :return: The copy_of of this Analysis.
        :rtype: str
        """
        return self._copy_of

    @copy_of.setter
    def copy_of(self, copy_of):
        """Sets the copy_of of this Analysis.


        :param copy_of: The copy_of of this Analysis.  # noqa: E501
        :type: str
        """

        self._copy_of = copy_of

    @property
    def original_copy_of(self):
        """Gets the original_copy_of of this Analysis.


        :return: The original_copy_of of this Analysis.
        :rtype: str
        """
        return self._original_copy_of

    @original_copy_of.setter
    def original_copy_of(self, original_copy_of):
        """Sets the original_copy_of of this Analysis.


        :param original_copy_of: The original_copy_of of this Analysis.  # noqa: E501
        :type: str
        """

        self._original_copy_of = original_copy_of

    @property
    def deleted(self):
        """Gets the deleted of this Analysis.


        :return: The deleted of this Analysis.
        :rtype: datetime
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Analysis.


        :param deleted: The deleted of this Analysis.  # noqa: E501
        :type: datetime
        """

        self._deleted = deleted


    @staticmethod
    def positional_to_model(value):
        """Converts a positional argument to a model value"""
        return value

    def return_value(self):
        """Unwraps return value from model"""
        return self

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Analysis):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

    # Container emulation
    def __getitem__(self, key):
        """Returns the value of key"""
        key = self._map_key(key)
        return getattr(self, key)

    def __setitem__(self, key, value):
        """Sets the value of key"""
        key = self._map_key(key)
        setattr(self, key, value)

    def __contains__(self, key):
        """Checks if the given value is a key in this object"""
        key = self._map_key(key, raise_on_error=False)
        return key is not None

    def keys(self):
        """Returns the list of json properties in the object"""
        return self.__class__.rattribute_map.keys()

    def values(self):
        """Returns the list of values in the object"""
        for key in self.__class__.attribute_map.keys():
            yield getattr(self, key)

    def items(self):
        """Returns the list of json property to value mapping"""
        for key, prop in self.__class__.rattribute_map.items():
            yield key, getattr(self, prop)

    def get(self, key, default=None):
        """Get the value of the provided json property, or default"""
        key = self._map_key(key, raise_on_error=False)
        if key:
            return getattr(self, key, default)
        return default

    def _map_key(self, key, raise_on_error=True):
        result = self.__class__.rattribute_map.get(key)
        if result is None:
            if raise_on_error:
                raise AttributeError('Invalid attribute name: {}'.format(key))
            return None
        return '_' + result
