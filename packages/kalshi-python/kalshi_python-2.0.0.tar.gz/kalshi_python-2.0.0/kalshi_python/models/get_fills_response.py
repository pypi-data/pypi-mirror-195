# coding: utf-8

"""
    Kalshi Trade API

    This documentation describes Kalshi's trading API (known as Trade API v2). By using this API, you agree to Kalshi's Developer Agreement (https://kalshi.com/developer-agreement).  # noqa: E501

    OpenAPI spec version: 2.0.0
    Contact: support@kalshi.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetFillsResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cursor': 'str',
        'fills': 'Fills'
    }

    attribute_map = {
        'cursor': 'cursor',
        'fills': 'fills'
    }

    def __init__(self, cursor=None, fills=None):  # noqa: E501
        """GetFillsResponse - a model defined in Swagger"""  # noqa: E501
        self._cursor = None
        self._fills = None
        self.discriminator = None
        if cursor is not None:
            self.cursor = cursor
        self.fills = fills

    @property
    def cursor(self):
        """Gets the cursor of this GetFillsResponse.  # noqa: E501

        The Cursor represents a pointer to the next page of records in the pagination. Use the value returned here in the cursor query parameter for this end-point to get the next page containing limit records. An empty value of this field indicates there is no next page.  # noqa: E501

        :return: The cursor of this GetFillsResponse.  # noqa: E501
        :rtype: str
        """
        return self._cursor

    @cursor.setter
    def cursor(self, cursor):
        """Sets the cursor of this GetFillsResponse.

        The Cursor represents a pointer to the next page of records in the pagination. Use the value returned here in the cursor query parameter for this end-point to get the next page containing limit records. An empty value of this field indicates there is no next page.  # noqa: E501

        :param cursor: The cursor of this GetFillsResponse.  # noqa: E501
        :type: str
        """

        self._cursor = cursor

    @property
    def fills(self):
        """Gets the fills of this GetFillsResponse.  # noqa: E501


        :return: The fills of this GetFillsResponse.  # noqa: E501
        :rtype: Fills
        """
        return self._fills

    @fills.setter
    def fills(self, fills):
        """Sets the fills of this GetFillsResponse.


        :param fills: The fills of this GetFillsResponse.  # noqa: E501
        :type: Fills
        """
        if fills is None:
            raise ValueError("Invalid value for `fills`, must not be `None`")  # noqa: E501

        self._fills = fills

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetFillsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetFillsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
