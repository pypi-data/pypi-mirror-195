# coding: utf-8

"""
    RIME Rest API

    API methods for RIME. Must be authenticated with `rime-api-key` header.  # noqa: E501

    OpenAPI spec version: 1.0
    Contact: dev@robustintelligence.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TestrunTestSuiteConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'categories': 'list[TestrunTestCategory]',
        'run_default_categories': 'bool',
        'test_sensitivity': 'TestrunTestSensitivity',
        'individual_tests_config': 'str',
        'custom_tests': 'list[str]'
    }

    attribute_map = {
        'categories': 'categories',
        'run_default_categories': 'runDefaultCategories',
        'test_sensitivity': 'testSensitivity',
        'individual_tests_config': 'individualTestsConfig',
        'custom_tests': 'customTests'
    }

    def __init__(self, categories=None, run_default_categories=None, test_sensitivity=None, individual_tests_config=None, custom_tests=None):  # noqa: E501
        """TestrunTestSuiteConfig - a model defined in Swagger"""  # noqa: E501
        self._categories = None
        self._run_default_categories = None
        self._test_sensitivity = None
        self._individual_tests_config = None
        self._custom_tests = None
        self.discriminator = None
        if categories is not None:
            self.categories = categories
        if run_default_categories is not None:
            self.run_default_categories = run_default_categories
        if test_sensitivity is not None:
            self.test_sensitivity = test_sensitivity
        if individual_tests_config is not None:
            self.individual_tests_config = individual_tests_config
        if custom_tests is not None:
            self.custom_tests = custom_tests

    @property
    def categories(self):
        """Gets the categories of this TestrunTestSuiteConfig.  # noqa: E501


        :return: The categories of this TestrunTestSuiteConfig.  # noqa: E501
        :rtype: list[TestrunTestCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this TestrunTestSuiteConfig.


        :param categories: The categories of this TestrunTestSuiteConfig.  # noqa: E501
        :type: list[TestrunTestCategory]
        """

        self._categories = categories

    @property
    def run_default_categories(self):
        """Gets the run_default_categories of this TestrunTestSuiteConfig.  # noqa: E501


        :return: The run_default_categories of this TestrunTestSuiteConfig.  # noqa: E501
        :rtype: bool
        """
        return self._run_default_categories

    @run_default_categories.setter
    def run_default_categories(self, run_default_categories):
        """Sets the run_default_categories of this TestrunTestSuiteConfig.


        :param run_default_categories: The run_default_categories of this TestrunTestSuiteConfig.  # noqa: E501
        :type: bool
        """

        self._run_default_categories = run_default_categories

    @property
    def test_sensitivity(self):
        """Gets the test_sensitivity of this TestrunTestSuiteConfig.  # noqa: E501


        :return: The test_sensitivity of this TestrunTestSuiteConfig.  # noqa: E501
        :rtype: TestrunTestSensitivity
        """
        return self._test_sensitivity

    @test_sensitivity.setter
    def test_sensitivity(self, test_sensitivity):
        """Sets the test_sensitivity of this TestrunTestSuiteConfig.


        :param test_sensitivity: The test_sensitivity of this TestrunTestSuiteConfig.  # noqa: E501
        :type: TestrunTestSensitivity
        """

        self._test_sensitivity = test_sensitivity

    @property
    def individual_tests_config(self):
        """Gets the individual_tests_config of this TestrunTestSuiteConfig.  # noqa: E501

        A serialized json blob including a config for each test.  # noqa: E501

        :return: The individual_tests_config of this TestrunTestSuiteConfig.  # noqa: E501
        :rtype: str
        """
        return self._individual_tests_config

    @individual_tests_config.setter
    def individual_tests_config(self, individual_tests_config):
        """Sets the individual_tests_config of this TestrunTestSuiteConfig.

        A serialized json blob including a config for each test.  # noqa: E501

        :param individual_tests_config: The individual_tests_config of this TestrunTestSuiteConfig.  # noqa: E501
        :type: str
        """

        self._individual_tests_config = individual_tests_config

    @property
    def custom_tests(self):
        """Gets the custom_tests of this TestrunTestSuiteConfig.  # noqa: E501

        A list of json custom test configs.  # noqa: E501

        :return: The custom_tests of this TestrunTestSuiteConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._custom_tests

    @custom_tests.setter
    def custom_tests(self, custom_tests):
        """Sets the custom_tests of this TestrunTestSuiteConfig.

        A list of json custom test configs.  # noqa: E501

        :param custom_tests: The custom_tests of this TestrunTestSuiteConfig.  # noqa: E501
        :type: list[str]
        """

        self._custom_tests = custom_tests

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TestrunTestSuiteConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestrunTestSuiteConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
