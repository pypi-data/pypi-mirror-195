# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pyocd_grpc import debugprobe_pb2 as pyocd__grpc_dot_debugprobe__pb2


class DebugProbeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DebugProbeCommand = channel.unary_unary(
                '/debug_probe.DebugProbeService/DebugProbeCommand',
                request_serializer=pyocd__grpc_dot_debugprobe__pb2.DebugProbeRequest.SerializeToString,
                response_deserializer=pyocd__grpc_dot_debugprobe__pb2.DebugProbeResponse.FromString,
                )


class DebugProbeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DebugProbeCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DebugProbeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DebugProbeCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.DebugProbeCommand,
                    request_deserializer=pyocd__grpc_dot_debugprobe__pb2.DebugProbeRequest.FromString,
                    response_serializer=pyocd__grpc_dot_debugprobe__pb2.DebugProbeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'debug_probe.DebugProbeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class DebugProbeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DebugProbeCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/debug_probe.DebugProbeService/DebugProbeCommand',
            pyocd__grpc_dot_debugprobe__pb2.DebugProbeRequest.SerializeToString,
            pyocd__grpc_dot_debugprobe__pb2.DebugProbeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
