{"version":3,"file":"568.b5b43119af16c71dd07d.js?v=b5b43119af16c71dd07d","mappings":"kOASA,MAIMA,EAAY,+CAiDlB,EADgB,CA5CD,CACXC,GAAID,EACJE,WAAW,EACXC,SAAU,CAAC,EAAAC,cACXC,SAAU,CAAC,EAAAC,sBAAuB,EAAAC,0BAClCC,SAAU,CAACC,EAAKC,EAAaC,EAAeC,KACxC,MAAMC,EAAU,EAAAC,WAAA,aACVC,EAASC,KAAKC,MAAM,EAAAH,WAAA,UAAqB,uBAAyB,MAAMd,IAAc,CAAC,EACvFkB,EAAMH,EAAOI,YAhBH,2DAiBVA,EAAa,EAAAC,OAAA,MAAaF,GAAKG,KAE/BC,GADaP,EAAOO,aAAe,IACVC,KAAKC,GAAW,EAAAJ,OAAA,MAAaI,GAAQH,OAC9DI,IAAwBV,EAAOU,oBACrCf,EAAYgB,SAAS,CACjBC,KAAM,CACFC,KAAM,SACNC,aAAc,mBACdC,SAAU,SACVC,KAAM,GACNC,UAAW,CACP,aAAc,OACd,aAAc,EAAAZ,OAAA,KAAYP,EAAS,6BAG3CoB,OAAQC,MAAOC,IACX,MAAM,cAAEC,SAAwB,kCAC1BC,MAAiB1B,aAAqD,EAASA,EAAc2B,YAAa1B,aAA2D,EAASA,EAAiB0B,UAOrM,OANID,EACAE,QAAQC,KAAK,yDAGbD,QAAQE,KAAK,6DAEV,IAAIL,EAAc,IAClBD,EACHhB,aACAG,cACAG,sBACAY,cACF,GAER,G","sources":["webpack://@jupyterlite/pyodide-kernel-extension/./lib/index.js"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\nimport { PageConfig, URLExt } from '@jupyterlab/coreutils';\nimport { IServiceWorkerManager, } from '@jupyterlite/server';\nimport { IKernelSpecs } from '@jupyterlite/kernel';\nimport { IBroadcastChannelWrapper } from '@jupyterlite/contents';\n/**\n * The default CDN fallback for Pyodide\n */\nconst PYODIDE_CDN_URL = 'https://cdn.jsdelivr.net/pyodide/v0.22.0/full/pyodide.js';\n/**\n * The id for the extension, and key in the litePlugins.\n */\nconst PLUGIN_ID = '@jupyterlite/pyodide-kernel-extension:kernel';\n/**\n * A plugin to register the Pyodide kernel.\n */\nconst kernel = {\n    id: PLUGIN_ID,\n    autoStart: true,\n    requires: [IKernelSpecs],\n    optional: [IServiceWorkerManager, IBroadcastChannelWrapper],\n    activate: (app, kernelspecs, serviceWorker, broadcastChannel) => {\n        const baseUrl = PageConfig.getBaseUrl();\n        const config = JSON.parse(PageConfig.getOption('litePluginSettings') || '{}')[PLUGIN_ID] || {};\n        const url = config.pyodideUrl || PYODIDE_CDN_URL;\n        const pyodideUrl = URLExt.parse(url).href;\n        const rawPipUrls = config.pipliteUrls || [];\n        const pipliteUrls = rawPipUrls.map((pipUrl) => URLExt.parse(pipUrl).href);\n        const disablePyPIFallback = !!config.disablePyPIFallback;\n        kernelspecs.register({\n            spec: {\n                name: 'python',\n                display_name: 'Python (Pyodide)',\n                language: 'python',\n                argv: [],\n                resources: {\n                    'logo-32x32': 'TODO',\n                    'logo-64x64': URLExt.join(baseUrl, '/kernelspecs/python.svg'),\n                },\n            },\n            create: async (options) => {\n                const { PyodideKernel } = await import('@jupyterlite/pyodide-kernel');\n                const mountDrive = !!((serviceWorker === null || serviceWorker === void 0 ? void 0 : serviceWorker.enabled) && (broadcastChannel === null || broadcastChannel === void 0 ? void 0 : broadcastChannel.enabled));\n                if (mountDrive) {\n                    console.info('Pyodide contents will be synced with Jupyter Contents');\n                }\n                else {\n                    console.warn('Pyodide contents will NOT be synced with Jupyter Contents');\n                }\n                return new PyodideKernel({\n                    ...options,\n                    pyodideUrl,\n                    pipliteUrls,\n                    disablePyPIFallback,\n                    mountDrive,\n                });\n            },\n        });\n    },\n};\nconst plugins = [kernel];\nexport default plugins;\n"],"names":["PLUGIN_ID","id","autoStart","requires","IKernelSpecs","optional","IServiceWorkerManager","IBroadcastChannelWrapper","activate","app","kernelspecs","serviceWorker","broadcastChannel","baseUrl","PageConfig","config","JSON","parse","url","pyodideUrl","URLExt","href","pipliteUrls","map","pipUrl","disablePyPIFallback","register","spec","name","display_name","language","argv","resources","create","async","options","PyodideKernel","mountDrive","enabled","console","info","warn"],"sourceRoot":""}