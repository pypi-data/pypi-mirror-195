# Autogenerated by nbdev

d = { 'settings': { 'branch': 'main',
                'doc_baseurl': '/tsforecast',
                'doc_host': 'https://JaumeAmoresDS.github.io',
                'git_url': 'https://github.com/JaumeAmoresDS/tsforecast',
                'lib_path': 'tsforecast'},
  'syms': { 'tsforecast.dataset': { 'tsforecast.dataset.UCIRetailDataSet': ('dataset.html#uciretaildataset', 'tsforecast/dataset.py'),
                                    'tsforecast.dataset.UCIRetailDataSet.__init__': ( 'dataset.html#uciretaildataset.__init__',
                                                                                      'tsforecast/dataset.py'),
                                    'tsforecast.dataset.UCIRetailDataSet.clean_and_format': ( 'dataset.html#uciretaildataset.clean_and_format',
                                                                                              'tsforecast/dataset.py'),
                                    'tsforecast.dataset.UCIRetailDataSet.load': ( 'dataset.html#uciretaildataset.load',
                                                                                  'tsforecast/dataset.py')},
            'tsforecast.defaults': {},
            'tsforecast.forecasting_pipeline': { 'tsforecast.forecasting_pipeline.ForecastingPipeline': ( 'forecasting_pipeline.html#forecastingpipeline',
                                                                                                          'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.__init__': ( 'forecasting_pipeline.html#forecastingpipeline.__init__',
                                                                                                                   'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline._get_last_period': ( 'forecasting_pipeline.html#forecastingpipeline._get_last_period',
                                                                                                                           'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline._make_windows_from_period': ( 'forecasting_pipeline.html#forecastingpipeline._make_windows_from_period',
                                                                                                                                    'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.evaluate': ( 'forecasting_pipeline.html#forecastingpipeline.evaluate',
                                                                                                                   'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.fit': ( 'forecasting_pipeline.html#forecastingpipeline.fit',
                                                                                                              'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.get_debugging_info': ( 'forecasting_pipeline.html#forecastingpipeline.get_debugging_info',
                                                                                                                             'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.get_history': ( 'forecasting_pipeline.html#forecastingpipeline.get_history',
                                                                                                                      'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.load': ( 'forecasting_pipeline.html#forecastingpipeline.load',
                                                                                                               'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.load_data_and_get_windows': ( 'forecasting_pipeline.html#forecastingpipeline.load_data_and_get_windows',
                                                                                                                                    'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.plot': ( 'forecasting_pipeline.html#forecastingpipeline.plot',
                                                                                                               'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.predict': ( 'forecasting_pipeline.html#forecastingpipeline.predict',
                                                                                                                  'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.predict_period': ( 'forecasting_pipeline.html#forecastingpipeline.predict_period',
                                                                                                                         'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.prepare_data': ( 'forecasting_pipeline.html#forecastingpipeline.prepare_data',
                                                                                                                       'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.run_all': ( 'forecasting_pipeline.html#forecastingpipeline.run_all',
                                                                                                                  'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.save': ( 'forecasting_pipeline.html#forecastingpipeline.save',
                                                                                                               'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.save_config': ( 'forecasting_pipeline.html#forecastingpipeline.save_config',
                                                                                                                      'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.setup': ( 'forecasting_pipeline.html#forecastingpipeline.setup',
                                                                                                                'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.ForecastingPipeline.split': ( 'forecasting_pipeline.html#forecastingpipeline.split',
                                                                                                                'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.SplitError': ( 'forecasting_pipeline.html#spliterror',
                                                                                                 'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.load_pipeline': ( 'forecasting_pipeline.html#load_pipeline',
                                                                                                    'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.run_prediction_pipeline': ( 'forecasting_pipeline.html#run_prediction_pipeline',
                                                                                                              'tsforecast/forecasting_pipeline.py'),
                                                 'tsforecast.forecasting_pipeline.time_steps_per_split': ( 'forecasting_pipeline.html#time_steps_per_split',
                                                                                                           'tsforecast/forecasting_pipeline.py')},
            'tsforecast.hp_search': { 'tsforecast.hp_search.analysis': ('hyper_parameters.html#analysis', 'tsforecast/hp_search.py'),
                                      'tsforecast.hp_search.hp_search': ('hyper_parameters.html#hp_search', 'tsforecast/hp_search.py'),
                                      'tsforecast.hp_search.plot_selected': ( 'hyper_parameters.html#plot_selected',
                                                                              'tsforecast/hp_search.py'),
                                      'tsforecast.hp_search.retrain_and_save_selected_experiment': ( 'hyper_parameters.html#retrain_and_save_selected_experiment',
                                                                                                     'tsforecast/hp_search.py')},
            'tsforecast.model': { 'tsforecast.model.FeedBackWithTimeFeatures': ( 'model.html#feedbackwithtimefeatures',
                                                                                 'tsforecast/model.py'),
                                  'tsforecast.model.FeedBackWithTimeFeatures.__init__': ( 'model.html#feedbackwithtimefeatures.__init__',
                                                                                          'tsforecast/model.py'),
                                  'tsforecast.model.FeedBackWithTimeFeatures._get_regularizer': ( 'model.html#feedbackwithtimefeatures._get_regularizer',
                                                                                                  'tsforecast/model.py'),
                                  'tsforecast.model.FeedBackWithTimeFeatures.call': ( 'model.html#feedbackwithtimefeatures.call',
                                                                                      'tsforecast/model.py'),
                                  'tsforecast.model.FeedBackWithTimeFeatures.predict_from_numpy_array': ( 'model.html#feedbackwithtimefeatures.predict_from_numpy_array',
                                                                                                          'tsforecast/model.py'),
                                  'tsforecast.model.FeedBackWithTimeFeatures.warmup': ( 'model.html#feedbackwithtimefeatures.warmup',
                                                                                        'tsforecast/model.py'),
                                  'tsforecast.model.Model': ('model.html#model', 'tsforecast/model.py'),
                                  'tsforecast.model.Model.__init__': ('model.html#model.__init__', 'tsforecast/model.py'),
                                  'tsforecast.model.Model.__repr__': ('model.html#model.__repr__', 'tsforecast/model.py'),
                                  'tsforecast.model.Model.evaluate': ('model.html#model.evaluate', 'tsforecast/model.py'),
                                  'tsforecast.model.Model.fit': ('model.html#model.fit', 'tsforecast/model.py'),
                                  'tsforecast.model.Model.get_model': ('model.html#model.get_model', 'tsforecast/model.py'),
                                  'tsforecast.model.Model.load_model': ('model.html#model.load_model', 'tsforecast/model.py'),
                                  'tsforecast.model.Model.predict': ('model.html#model.predict', 'tsforecast/model.py'),
                                  'tsforecast.model.Model.save_model': ('model.html#model.save_model', 'tsforecast/model.py'),
                                  'tsforecast.model.Model.set_model': ('model.html#model.set_model', 'tsforecast/model.py'),
                                  'tsforecast.model.Model.setup': ('model.html#model.setup', 'tsforecast/model.py'),
                                  'tsforecast.model.MultiStepLastBaseline': ('model.html#multisteplastbaseline', 'tsforecast/model.py'),
                                  'tsforecast.model.MultiStepLastBaseline.call': ( 'model.html#multisteplastbaseline.call',
                                                                                   'tsforecast/model.py'),
                                  'tsforecast.model.RepeatBaseline': ('model.html#repeatbaseline', 'tsforecast/model.py'),
                                  'tsforecast.model.RepeatBaseline.call': ('model.html#repeatbaseline.call', 'tsforecast/model.py'),
                                  'tsforecast.model.TimeIndexer': ('model.html#timeindexer', 'tsforecast/model.py'),
                                  'tsforecast.model.TimeIndexer.__init__': ('model.html#timeindexer.__init__', 'tsforecast/model.py'),
                                  'tsforecast.model.TimeIndexer.call': ('model.html#timeindexer.call', 'tsforecast/model.py'),
                                  'tsforecast.model.TimeIndexer.get_time_index': ( 'model.html#timeindexer.get_time_index',
                                                                                   'tsforecast/model.py')},
            'tsforecast.time_transform': { 'tsforecast.time_transform.CalendarTimeTransform': ( 'time_transform.html#calendartimetransform',
                                                                                                'tsforecast/time_transform.py'),
                                           'tsforecast.time_transform.CalendarTimeTransform.__init__': ( 'time_transform.html#calendartimetransform.__init__',
                                                                                                         'tsforecast/time_transform.py'),
                                           'tsforecast.time_transform.CalendarTimeTransform.transform': ( 'time_transform.html#calendartimetransform.transform',
                                                                                                          'tsforecast/time_transform.py'),
                                           'tsforecast.time_transform.PeriodicTimeTransform': ( 'time_transform.html#periodictimetransform',
                                                                                                'tsforecast/time_transform.py'),
                                           'tsforecast.time_transform.PeriodicTimeTransform.__init__': ( 'time_transform.html#periodictimetransform.__init__',
                                                                                                         'tsforecast/time_transform.py'),
                                           'tsforecast.time_transform.PeriodicTimeTransform.transform': ( 'time_transform.html#periodictimetransform.transform',
                                                                                                          'tsforecast/time_transform.py'),
                                           'tsforecast.time_transform.get_time_ft_columns': ( 'time_transform.html#get_time_ft_columns',
                                                                                              'tsforecast/time_transform.py'),
                                           'tsforecast.time_transform.make_time_transform': ( 'time_transform.html#make_time_transform',
                                                                                              'tsforecast/time_transform.py')},
            'tsforecast.window_generator': { 'tsforecast.window_generator.WindowGenerator': ( 'window_generator.html#windowgenerator',
                                                                                              'tsforecast/window_generator.py'),
                                             'tsforecast.window_generator.WindowGenerator.__init__': ( 'window_generator.html#windowgenerator.__init__',
                                                                                                       'tsforecast/window_generator.py'),
                                             'tsforecast.window_generator.WindowGenerator.__repr__': ( 'window_generator.html#windowgenerator.__repr__',
                                                                                                       'tsforecast/window_generator.py'),
                                             'tsforecast.window_generator.WindowGenerator.example': ( 'window_generator.html#windowgenerator.example',
                                                                                                      'tsforecast/window_generator.py'),
                                             'tsforecast.window_generator.WindowGenerator.load': ( 'window_generator.html#windowgenerator.load',
                                                                                                   'tsforecast/window_generator.py'),
                                             'tsforecast.window_generator.WindowGenerator.main': ( 'window_generator.html#windowgenerator.main',
                                                                                                   'tsforecast/window_generator.py'),
                                             'tsforecast.window_generator.WindowGenerator.make_dataset': ( 'window_generator.html#windowgenerator.make_dataset',
                                                                                                           'tsforecast/window_generator.py'),
                                             'tsforecast.window_generator.WindowGenerator.plot': ( 'window_generator.html#windowgenerator.plot',
                                                                                                   'tsforecast/window_generator.py'),
                                             'tsforecast.window_generator.WindowGenerator.save': ( 'window_generator.html#windowgenerator.save',
                                                                                                   'tsforecast/window_generator.py'),
                                             'tsforecast.window_generator.WindowGenerator.setup': ( 'window_generator.html#windowgenerator.setup',
                                                                                                    'tsforecast/window_generator.py'),
                                             'tsforecast.window_generator.WindowGenerator.split_window': ( 'window_generator.html#windowgenerator.split_window',
                                                                                                           'tsforecast/window_generator.py'),
                                             'tsforecast.window_generator.WindowGenerator.test': ( 'window_generator.html#windowgenerator.test',
                                                                                                   'tsforecast/window_generator.py'),
                                             'tsforecast.window_generator.WindowGenerator.train': ( 'window_generator.html#windowgenerator.train',
                                                                                                    'tsforecast/window_generator.py'),
                                             'tsforecast.window_generator.WindowGenerator.val': ( 'window_generator.html#windowgenerator.val',
                                                                                                  'tsforecast/window_generator.py')}}}
