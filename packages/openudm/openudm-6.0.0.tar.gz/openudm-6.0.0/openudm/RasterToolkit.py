# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_RasterToolkit')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_RasterToolkit')
    _RasterToolkit = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_RasterToolkit', [dirname(__file__)])
        except ImportError:
            import _RasterToolkit
            return _RasterToolkit
        try:
            _mod = imp.load_module('_RasterToolkit', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _RasterToolkit = swig_import_helper()
    del swig_import_helper
else:
    import _RasterToolkit
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

class RTCell(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RTCell, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RTCell, name)
    __repr__ = _swig_repr
    __swig_setmethods__["c"] = _RasterToolkit.RTCell_c_set
    __swig_getmethods__["c"] = _RasterToolkit.RTCell_c_get
    if _newclass:
        c = _swig_property(_RasterToolkit.RTCell_c_get, _RasterToolkit.RTCell_c_set)
    __swig_setmethods__["r"] = _RasterToolkit.RTCell_r_set
    __swig_getmethods__["r"] = _RasterToolkit.RTCell_r_get
    if _newclass:
        r = _swig_property(_RasterToolkit.RTCell_r_get, _RasterToolkit.RTCell_r_set)
    __swig_setmethods__["z"] = _RasterToolkit.RTCell_z_set
    __swig_getmethods__["z"] = _RasterToolkit.RTCell_z_get
    if _newclass:
        z = _swig_property(_RasterToolkit.RTCell_z_get, _RasterToolkit.RTCell_z_set)

    def __init__(self, col, row, zone):
        this = _RasterToolkit.new_RTCell(col, row, zone)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RasterToolkit.delete_RTCell
    __del__ = lambda self: None
RTCell_swigregister = _RasterToolkit.RTCell_swigregister
RTCell_swigregister(RTCell)

class RTZone(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RTZone, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RTZone, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _RasterToolkit.RTZone_id_set
    __swig_getmethods__["id"] = _RasterToolkit.RTZone_id_get
    if _newclass:
        id = _swig_property(_RasterToolkit.RTZone_id_get, _RasterToolkit.RTZone_id_set)
    __swig_setmethods__["cells"] = _RasterToolkit.RTZone_cells_set
    __swig_getmethods__["cells"] = _RasterToolkit.RTZone_cells_get
    if _newclass:
        cells = _swig_property(_RasterToolkit.RTZone_cells_get, _RasterToolkit.RTZone_cells_set)

    def __init__(self, zid):
        this = _RasterToolkit.new_RTZone(zid)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RasterToolkit.delete_RTZone
    __del__ = lambda self: None
RTZone_swigregister = _RasterToolkit.RTZone_swigregister
RTZone_swigregister(RTZone)

class RTTile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RTTile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RTTile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dph"] = _RasterToolkit.RTTile_dph_set
    __swig_getmethods__["dph"] = _RasterToolkit.RTTile_dph_get
    if _newclass:
        dph = _swig_property(_RasterToolkit.RTTile_dph_get, _RasterToolkit.RTTile_dph_set)
    __swig_setmethods__["str"] = _RasterToolkit.RTTile_str_set
    __swig_getmethods__["str"] = _RasterToolkit.RTTile_str_get
    if _newclass:
        str = _swig_property(_RasterToolkit.RTTile_str_get, _RasterToolkit.RTTile_str_set)
    __swig_setmethods__["str90"] = _RasterToolkit.RTTile_str90_set
    __swig_getmethods__["str90"] = _RasterToolkit.RTTile_str90_get
    if _newclass:
        str90 = _swig_property(_RasterToolkit.RTTile_str90_get, _RasterToolkit.RTTile_str90_set)
    __swig_setmethods__["ras"] = _RasterToolkit.RTTile_ras_set
    __swig_getmethods__["ras"] = _RasterToolkit.RTTile_ras_get
    if _newclass:
        ras = _swig_property(_RasterToolkit.RTTile_ras_get, _RasterToolkit.RTTile_ras_set)
    __swig_setmethods__["ras90"] = _RasterToolkit.RTTile_ras90_set
    __swig_getmethods__["ras90"] = _RasterToolkit.RTTile_ras90_get
    if _newclass:
        ras90 = _swig_property(_RasterToolkit.RTTile_ras90_get, _RasterToolkit.RTTile_ras90_set)

    def __init__(self, tile_dph):
        this = _RasterToolkit.new_RTTile(tile_dph)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RasterToolkit.delete_RTTile
    __del__ = lambda self: None
RTTile_swigregister = _RasterToolkit.RTTile_swigregister
RTTile_swigregister(RTTile)

class UFTile(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, UFTile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, UFTile, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dph"] = _RasterToolkit.UFTile_dph_set
    __swig_getmethods__["dph"] = _RasterToolkit.UFTile_dph_get
    if _newclass:
        dph = _swig_property(_RasterToolkit.UFTile_dph_get, _RasterToolkit.UFTile_dph_set)
    __swig_setmethods__["build_cov"] = _RasterToolkit.UFTile_build_cov_set
    __swig_getmethods__["build_cov"] = _RasterToolkit.UFTile_build_cov_get
    if _newclass:
        build_cov = _swig_property(_RasterToolkit.UFTile_build_cov_get, _RasterToolkit.UFTile_build_cov_set)
    __swig_setmethods__["roads_cov"] = _RasterToolkit.UFTile_roads_cov_set
    __swig_getmethods__["roads_cov"] = _RasterToolkit.UFTile_roads_cov_get
    if _newclass:
        roads_cov = _swig_property(_RasterToolkit.UFTile_roads_cov_get, _RasterToolkit.UFTile_roads_cov_set)
    __swig_setmethods__["green_cov"] = _RasterToolkit.UFTile_green_cov_set
    __swig_getmethods__["green_cov"] = _RasterToolkit.UFTile_green_cov_get
    if _newclass:
        green_cov = _swig_property(_RasterToolkit.UFTile_green_cov_get, _RasterToolkit.UFTile_green_cov_set)
    __swig_setmethods__["str"] = _RasterToolkit.UFTile_str_set
    __swig_getmethods__["str"] = _RasterToolkit.UFTile_str_get
    if _newclass:
        str = _swig_property(_RasterToolkit.UFTile_str_get, _RasterToolkit.UFTile_str_set)
    __swig_setmethods__["str90"] = _RasterToolkit.UFTile_str90_set
    __swig_getmethods__["str90"] = _RasterToolkit.UFTile_str90_get
    if _newclass:
        str90 = _swig_property(_RasterToolkit.UFTile_str90_get, _RasterToolkit.UFTile_str90_set)
    __swig_setmethods__["ras"] = _RasterToolkit.UFTile_ras_set
    __swig_getmethods__["ras"] = _RasterToolkit.UFTile_ras_get
    if _newclass:
        ras = _swig_property(_RasterToolkit.UFTile_ras_get, _RasterToolkit.UFTile_ras_set)
    __swig_setmethods__["ras90"] = _RasterToolkit.UFTile_ras90_set
    __swig_getmethods__["ras90"] = _RasterToolkit.UFTile_ras90_get
    if _newclass:
        ras90 = _swig_property(_RasterToolkit.UFTile_ras90_get, _RasterToolkit.UFTile_ras90_set)

    def __init__(self):
        this = _RasterToolkit.new_UFTile()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _RasterToolkit.delete_UFTile
    __del__ = lambda self: None
UFTile_swigregister = _RasterToolkit.UFTile_swigregister
UFTile_swigregister(UFTile)


def DevCompare(iRas1, iRas2, result):
    return _RasterToolkit.DevCompare(iRas1, iRas2, result)
DevCompare = _RasterToolkit.DevCompare

def IRasterCompare(iRas1, iRas2, result):
    return _RasterToolkit.IRasterCompare(iRas1, iRas2, result)
IRasterCompare = _RasterToolkit.IRasterCompare

def DRasterCompare(dRas1, dRas2, result):
    return _RasterToolkit.DRasterCompare(dRas1, dRas2, result)
DRasterCompare = _RasterToolkit.DRasterCompare

def IRasterFixNoDataVal(srcRas, srcVal):
    return _RasterToolkit.IRasterFixNoDataVal(srcRas, srcVal)
IRasterFixNoDataVal = _RasterToolkit.IRasterFixNoDataVal

def IRasterSetNoDataToRef(srcRas, refRas):
    return _RasterToolkit.IRasterSetNoDataToRef(srcRas, refRas)
IRasterSetNoDataToRef = _RasterToolkit.IRasterSetNoDataToRef

def DRasterFixNoDataVal(srcRas, srcVal):
    return _RasterToolkit.DRasterFixNoDataVal(srcRas, srcVal)
DRasterFixNoDataVal = _RasterToolkit.DRasterFixNoDataVal

def DRasterSetNoDataToRef(srcRas, refRas):
    return _RasterToolkit.DRasterSetNoDataToRef(srcRas, refRas)
DRasterSetNoDataToRef = _RasterToolkit.DRasterSetNoDataToRef

def DRasterTidyNoDataVal(srcRas, srcVal):
    return _RasterToolkit.DRasterTidyNoDataVal(srcRas, srcVal)
DRasterTidyNoDataVal = _RasterToolkit.DRasterTidyNoDataVal

def IRasterMaskedAddValue(zoneIDRas, val):
    return _RasterToolkit.IRasterMaskedAddValue(zoneIDRas, val)
IRasterMaskedAddValue = _RasterToolkit.IRasterMaskedAddValue

def IRasterNotBoolean(srcRas):
    return _RasterToolkit.IRasterNotBoolean(srcRas)
IRasterNotBoolean = _RasterToolkit.IRasterNotBoolean

def IRasterAddBoolean(ras1Str, ras2Str, resultStr):
    return _RasterToolkit.IRasterAddBoolean(ras1Str, ras2Str, resultStr)
IRasterAddBoolean = _RasterToolkit.IRasterAddBoolean

def Standardise(srcRas, maskRas):
    return _RasterToolkit.Standardise(srcRas, maskRas)
Standardise = _RasterToolkit.Standardise

def RevPolarityStandardise(srcRas, maskRas):
    return _RasterToolkit.RevPolarityStandardise(srcRas, maskRas)
RevPolarityStandardise = _RasterToolkit.RevPolarityStandardise

def AreaFromRaster(wardIDRas, numWards, wardDataRas, refVal, areaOutput):
    return _RasterToolkit.AreaFromRaster(wardIDRas, numWards, wardDataRas, refVal, areaOutput)
AreaFromRaster = _RasterToolkit.AreaFromRaster

def BooleanDownsampler(inputRas, outputRas, singleDimCellsToCell, twoDimCellThreshold):
    return _RasterToolkit.BooleanDownsampler(inputRas, outputRas, singleDimCellsToCell, twoDimCellThreshold)
BooleanDownsampler = _RasterToolkit.BooleanDownsampler

def DRasterSumRows(inputRas, outputCSV):
    return _RasterToolkit.DRasterSumRows(inputRas, outputCSV)
DRasterSumRows = _RasterToolkit.DRasterSumRows

def DRasterSumColumns(inputRas, outputCSV):
    return _RasterToolkit.DRasterSumColumns(inputRas, outputCSV)
DRasterSumColumns = _RasterToolkit.DRasterSumColumns

def DRasterAscToBin(input, output, pathToBinaryConfig):
    return _RasterToolkit.DRasterAscToBin(input, output, pathToBinaryConfig)
DRasterAscToBin = _RasterToolkit.DRasterAscToBin

def DRasterAscToCsv(input, output):
    return _RasterToolkit.DRasterAscToCsv(input, output)
DRasterAscToCsv = _RasterToolkit.DRasterAscToCsv

def IRasterAscToBin(input, output, pathToBinaryConfig):
    return _RasterToolkit.IRasterAscToBin(input, output, pathToBinaryConfig)
IRasterAscToBin = _RasterToolkit.IRasterAscToBin

def IRasterAscToCsv(input, output):
    return _RasterToolkit.IRasterAscToCsv(input, output)
IRasterAscToCsv = _RasterToolkit.IRasterAscToCsv

def DRasterBinToAsc(input, output, hdrFile):
    return _RasterToolkit.DRasterBinToAsc(input, output, hdrFile)
DRasterBinToAsc = _RasterToolkit.DRasterBinToAsc

def DRasterCsvToAsc(input, output, hdrfile):
    return _RasterToolkit.DRasterCsvToAsc(input, output, hdrfile)
DRasterCsvToAsc = _RasterToolkit.DRasterCsvToAsc

def IRasterBinToAsc(input, output, hdrFile):
    return _RasterToolkit.IRasterBinToAsc(input, output, hdrFile)
IRasterBinToAsc = _RasterToolkit.IRasterBinToAsc

def IRasterCsvToAsc(input, output, hdrfile):
    return _RasterToolkit.IRasterCsvToAsc(input, output, hdrfile)
IRasterCsvToAsc = _RasterToolkit.IRasterCsvToAsc

def DRasterAscToODVal(inputRas, inputZoneCodes, outputCSV):
    return _RasterToolkit.DRasterAscToODVal(inputRas, inputZoneCodes, outputCSV)
DRasterAscToODVal = _RasterToolkit.DRasterAscToODVal

def DRasterSubRaster(inRasStr, inCodeStr, outRasStr, outCodeStr, outHdrFile):
    return _RasterToolkit.DRasterSubRaster(inRasStr, inCodeStr, outRasStr, outCodeStr, outHdrFile)
DRasterSubRaster = _RasterToolkit.DRasterSubRaster

def IRasterDevToDPH(devInStr, dphInStr, devOutStr, dphOutStr):
    return _RasterToolkit.IRasterDevToDPH(devInStr, dphInStr, devOutStr, dphOutStr)
IRasterDevToDPH = _RasterToolkit.IRasterDevToDPH

def UrbanFabricGenerator(in_dphPath, out_dphPath, in_tilePath, in_numTiles):
    return _RasterToolkit.UrbanFabricGenerator(in_dphPath, out_dphPath, in_tilePath, in_numTiles)
UrbanFabricGenerator = _RasterToolkit.UrbanFabricGenerator

def RasteriseAreaThresholds(swapPath, rastHdr, constraintRas, devRas, inputTbl, numTblRows, summedLayerThreshold):
    return _RasterToolkit.RasteriseAreaThresholds(swapPath, rastHdr, constraintRas, devRas, inputTbl, numTblRows, summedLayerThreshold)
RasteriseAreaThresholds = _RasterToolkit.RasteriseAreaThresholds

def IRasterToHeader(inputRaster, outputHeader):
    return _RasterToolkit.IRasterToHeader(inputRaster, outputHeader)
IRasterToHeader = _RasterToolkit.IRasterToHeader

def ParameterFromHeader(header, parameter):
    return _RasterToolkit.ParameterFromHeader(header, parameter)
ParameterFromHeader = _RasterToolkit.ParameterFromHeader

def IRasterSetToValue(rasterHeader, value, outputRaster):
    return _RasterToolkit.IRasterSetToValue(rasterHeader, value, outputRaster)
IRasterSetToValue = _RasterToolkit.IRasterSetToValue

def UFGCoverageFromDensity(densityFolder, tilesFolder):
    return _RasterToolkit.UFGCoverageFromDensity(densityFolder, tilesFolder)
UFGCoverageFromDensity = _RasterToolkit.UFGCoverageFromDensity

def UFGFabricFromCoverage(buildTypeRas, tileTypeRas, urbanFabricRas, tilesFolder):
    return _RasterToolkit.UFGFabricFromCoverage(buildTypeRas, tileTypeRas, urbanFabricRas, tilesFolder)
UFGFabricFromCoverage = _RasterToolkit.UFGFabricFromCoverage
# This file is compatible with both classic and new-style classes.


