from enaml.application import deferred_call
from enaml.core.api import Looper
from enaml.layout.api import align, hbox, InsertTab, spacer, TabLayout, vbox
from enaml.stdlib.fields import FloatField
from enaml.stdlib.message_box import information, question
from enaml.qt.QtCore import Qt
from enaml.widgets.api import (Action, ButtonGroup, CheckBox, Container,
                               DockArea, DockItem, FileDialogEx, Form, HGroup,
                               Html, Label, MainWindow, Menu, MenuBar,
                               MPLCanvas, ObjectCombo, ProgressBar,
                               PushButton, Slider, Window)

from cochleogram.presenter import Presenter
from cochleogram import plot, util


def bind(figure, presenter):
    figure.canvas.mpl_connect('key_press_event', lambda e: presenter.key_press(e))
    figure.canvas.mpl_connect('button_press_event', lambda e: presenter.button_press(e))
    figure.canvas.mpl_connect('button_release_event', lambda e: presenter.button_release(e))
    figure.canvas.mpl_connect('scroll_event', lambda e: presenter.scroll(e))
    figure.canvas.mpl_connect('motion_notify_event', lambda e: presenter.motion(e))


def add_dock_item(dock_area, presenter):
    items = dock_area.dock_items()
    n_items = len(items)
    target = items[-1].name if n_items else ''

    item = MPLDockItem(dock_area, name='dock_{}'.format(n_items), presenter=presenter)
    op = InsertTab(item=item.name, target=target)
    dock_area.update_layout(op)


def save_state(parent, presenters):
    q = 'Your previous analysis will be overwritten. Are you sure?'
    button = question(parent, 'Confirm action', q)
    if button is not None and button.text == 'Yes':
        for presenter in presenters:
            presenter.save_state()
        information(parent, 'Analysis saved', 'Analysis has been saved.')


def load_state(parent, presenters):
    if any(p.unsaved_changes for p in presenters):
        q = 'There are unsaved changes. Your current analysis will be lost. Are you sure?'
        button = question(parent, 'Confirm action', q)
        if button is not None and button.text == 'No':
            return
    for presenter in presenters:
        try:
            presenter.load_state()
        except Exception as e:
            information(parent, 'Error', str(e))
    information(parent, 'Analysis loaded', 'Analysis has been loaded.')


CELLS = ['IHC', 'OHC1', 'OHC2', 'OHC3', 'Extra']


class CochleogramCanvas(MPLCanvas):

    def set_focus(self, event=None):
        self.figure.canvas.setFocus(Qt.OtherFocusReason)


def bind_focus(items, cb):
    observe = ['toggled', 'selected', 'value', 'clicked']
    for item in items:
        for o in observe:
            if hasattr(item, o):
                item.observe(o, cb)
        if getattr(item, 'children', []):
            bind_focus(item.children, cb)


enamldef MPLDockItem(DockItem):

    attr presenter
    closable = False

    title << 'Piece {}{}'.format(presenter.piece.piece, '*' if presenter.unsaved_changes else '')

    initialized ::
        bind_focus(container.children, canvas.set_focus)
        deferred_call(canvas.set_focus)

    Container: container:
        constraints = [
            vbox(
                hbox(display_label, display_channel, display_as_label,
                     display_mode, z_slice_number_label, z_slice,
                     display_apply, highlight_selected),
                hbox(mode_label, mode_buttons, submode_buttons, spacer),
                hbox(action_label, action_clear_spiral, action_clear_cells,
                     action_simplify_exclusions, action_merge_ohc_exclusions,
                     spacer, load_analysis, save_analysis, spacing=0),
                action_guess_cells,
                action_copy_exclusion,
                canvas,
            ),
            align('v_center', display_label, display_channel, display_as_label,
                  display_mode, z_slice_number_label, z_slice, display_apply,
                  highlight_selected),
            align('v_center', mode_label, mode_buttons),
            align('v_center', action_label, action_clear_spiral,
                  action_clear_cells, action_simplify_exclusions,
                  action_merge_ohc_exclusions),
            align('left', display_label, mode_label, action_label),
            align('left', display_channel, mode_buttons, action_clear_spiral,
                  action_guess_cells, action_copy_exclusion),
            submode_buttons.children[0].width == mode_buttons.children[0].width,
            guess_width.width == 50,
            guess_spacing.width == 50,
        ]

        Label: display_label:
            text = 'Display'

        ObjectCombo: display_channel:
            items = ['All'] + presenter.piece.channel_names
            selected << 'All' if presenter.current_artist is None else presenter.current_artist.display_channel
            selected ::
                presenter.set_display_channel(selected, display_apply.checked)

        Label: display_as_label:
            text = 'as'

        ObjectCombo: display_mode:
            items = ['projection', 'slice']
            selected << 'projection' if presenter.current_artist is None else presenter.current_artist.display_mode
            selected ::
                presenter.set_display_mode(selected, display_apply.checked)

        Label: z_slice_number_label:
            text = 'number'
            enabled << display_mode.selected == 'slice'

        Slider: z_slice:
            enabled << display_mode.selected == 'slice'
            tick_interval = 1
            value << 0 if presenter.current_artist is None else presenter.current_artist.z_slice
            value ::
                presenter.set_z_slice(value, display_apply.checked)
            minimum << 0 if presenter.current_artist is None else presenter.current_artist.z_slice_min
            maximum << 0 if presenter.current_artist is None else presenter.current_artist.z_slice_max

        PushButton: display_apply:
            text = 'Apply to all tiles'
            checkable = True
            checked = True
            clicked ::
                if checked:
                    presenter.set_display_mode(display_mode.selected, True)
                    presenter.set_display_channel(display_channel.selected, True)

        PushButton: highlight_selected:
            text = 'Highlight selected'
            checkable = True
            checked := presenter.highlight_selected

        ButtonGroup: mode_group:
            pass

        ButtonGroup: submode_group:
            pass

        Label: mode_label:
            text << 'Edit'

        HGroup: mode_buttons:
            padding = 0
            spacing = 0
            Looper:
                iterable = ['tiles'] + CELLS
                PushButton:
                    text = loop_item
                    group = mode_group
                    checkable = True
                    checked << loop_item == presenter.interaction_mode
                    toggled ::
                        if self.checked:
                            presenter.interaction_mode = loop_item

        HGroup: submode_buttons:
            padding = 0
            spacing = 0
            Looper:
                iterable = ['spiral', 'exclude', 'cells']
                PushButton:
                    enabled << (presenter.interaction_mode != 'tiles') and \
                        not (presenter.interaction_mode == 'Extra' and loop_item != 'cells')
                    text = loop_item
                    group = submode_group
                    checkable = True
                    checked << loop_item == presenter.interaction_submode
                    toggled ::
                        if self.checked:
                            presenter.interaction_submode = loop_item

        Label: action_label:
            text = 'Actions'

        PushButton: action_clear_spiral:
            text = 'Clear spiral'
            enabled << presenter.current_spiral_artist is not None and presenter.current_spiral_artist.has_nodes
            clicked ::
                button = question(self, 'Confirm action', 'Are you sure you want to remove the current spiral?')
                if button is not None and button.text == 'Yes':
                    presenter.action_clear_spiral()

        PushButton: action_clear_cells:
            text = 'Clear all cells'
            enabled << presenter.current_cells_artist is not None and presenter.current_cells_artist.has_nodes
            clicked ::
                button = question(self, 'Confirm action', 'Are you sure you want to remove the current cells?')
                if button is not None and button.text == 'Yes':
                    presenter.action_clear_cells()

        PushButton: action_simplify_exclusions:
            text = 'Simplify exclusions'
            enabled << presenter.current_spiral_artist is not None and presenter.current_spiral_artist.has_exclusion
            clicked ::
                m = f'Are you sure you want to simplify the excluded regions?'
                button = question(self, 'Confirm action', m)
                if button is not None and button.text == 'Yes':
                    try:
                        presenter.action_simplify_exclusion(presenter.interaction_mode)
                    except Exception as e:
                        information(self, 'Error', str(e))

        PushButton: action_merge_ohc_exclusions:
            text = 'Combine OHC exclusions'
            enabled << presenter.point_artists['OHC1', 'spiral'].has_spline and \
                presenter.point_artists['OHC2', 'spiral'].has_spline and \
                presenter.point_artists['OHC3', 'spiral'].has_spline and (\
                    presenter.point_artists['OHC1', 'spiral'].has_exclusion or \
                    presenter.point_artists['OHC2', 'spiral'].has_exclusion or \
                    presenter.point_artists['OHC3', 'spiral'].has_exclusion \
                                                                          )
            clicked ::
                m = f'Are you sure you want to merge all OHC excluded regions together?\n' \
                    'This will also simplify the excluded regions.'
                button = question(self, 'Confirm action', m)
                if button is not None and button.text == 'Yes':
                    try:
                        presenter.action_merge_exclusion('OHC1', 'OHC2', 'OHC3')
                    except Exception as e:
                        information(self, 'Error', str(e))

        PushButton: load_analysis:
            text = 'Load'
            clicked ::
                load_state(self, [presenter])

        PushButton: save_analysis:
            text = 'Save'
            clicked ::
                save_state(self, [presenter])

        HGroup: action_guess_cells:
            padding = 0
            align_widths = False
            share_layout = True
            trailing_spacer = spacer(0)
            enabled << presenter.current_spiral_artist is not None and presenter.current_spiral_artist.has_spline
            Label:
                text = 'Find cells within'
            FloatField: guess_width:
                value = 5.0
            Label:
                text = 'μm of spline with a spacing of'
            FloatField: guess_spacing:
                value = 5.0
            Label:
                text = 'μm using'
            ObjectCombo: guess_channel:
                items = presenter.piece.channel_names
                selected << items[0]

            PushButton:
                text = 'update'
                clicked ::
                    button = question(self, 'Confirm action', f'Are you sure you want to overwrite the existing cells?')
                    if button is not None and button.text == 'Yes':
                        n = presenter.action_guess_cells(guess_width.value,
                                                         guess_spacing.value,
                                                         guess_channel.selected)
                        information(self, 'Info', f'Found {n} cells')

        HGroup: action_copy_exclusion:
            padding = 0
            align_widths = False
            trailing_spacer = spacer(0)
            enabled << presenter.current_spiral_artist is not None and presenter.current_spiral_artist.has_exclusion
            Label:
                text = 'Copy excluded regions to'
            ObjectCombo: copy_exclusion_to:
                items << [c for c in CELLS if c != presenter.interaction_mode]
            PushButton:
                text = 'Copy'
                clicked ::
                    m = f'Are you sure you want to copy the excluded regions to {copy_exclusion_to.selected}?\n' \
                        f'The exclusion regions will be merged with any already-defined regions on {copy_exclusion_to.selected}.'
                    button = question(self, 'Confirm action', m)
                    if button is not None and button.text == 'Yes':
                        try:
                            presenter.action_copy_exclusion(copy_exclusion_to.selected)
                        except Exception as e:
                            information(self, 'Error', str(e))

        CochleogramCanvas: canvas:
            figure << presenter.figure
            toolbar_visible = False
            initialized ::
                deferred_call(bind, figure, presenter)


enamldef ProgressWindow(Window): window:

    title = 'Processing ...'
    modality = 'application_modal'
    always_on_top = True
    alias progress: pb.value

    Container:
        ProgressBar: pb:
            pass

        PushButton:
            text = 'Ok'
            enabled << (pb.value == pb.maximum)
            clicked ::
                window.close()


enamldef CochleagramWindow(MainWindow): window:

    initial_size = (900, 900)
    title = 'Cochelogram'

    attr cochlea
    attr presenters = []
    attr current_path = ''

    MenuBar:
        Menu:
            title = '&File'
            Action:
                text = 'Open processed dataset\tCtrl+O'
                triggered ::
                    path = FileDialogEx.get_existing_directory(window, current_path=window.current_path)
                    if path:
                        window.current_path = path
                        from cochleogram.model import Cochlea
                        window.cochlea = Cochlea.from_path(path)
                        window.presenters = [Presenter(p) for p in cochlea.pieces]
                        for p in window.presenters:
                            try:
                                p.load_state()
                            except IOError:
                                pass
                            deferred_call(add_dock_item, workspace, p)

            Action:
                text = 'Process LIF file\tCtrl+P'
                triggered ::
                    path = FileDialogEx.get_open_file_name(window, current_path=window.current_path)
                    if path:
                        pp = ProgressWindow()
                        pp.show()
                        cb = lambda x, pp=pp: setattr(pp, 'progress', x)
                        deferred_call(util.process_lif, path, reprocess=True, cb=cb)

            Action:
                text = 'Save analysis\tCtrl+S'
                triggered ::
                    save_state(window, window.presenters)

            Action:
                text = 'Load analysis\tCtrl+L'
                triggered ::
                    load_state(window, window.presenters)

            Action:
                separator = True

            Action:
                text = 'Generate frequency map\tCtrl+F'
                triggered ::
                    fig = plot.frequency_map(cochlea)
                    fig.suptitle(cochlea.name)
                    fig.savefig(cochlea.path / f'{cochlea.name}_frequency_map.pdf')
                    information(window, 'Frequency map', 'Frequency map has been generated.')

    initialized ::
        for presenter in presenters:
            deferred_call(add_dock_item, workspace, presenter)

    closing ::
        if any(p.unsaved_changes for p in presenters):
            button = question(window, 'Question', 'There are unsaved changes. Are you sure you want to exit?')
            if button is None or button.text == 'No':
                change['value'].ignore()

    Container:
        DockArea: workspace:
            name = 'dock_area'

            layout = TabLayout('help')

            DockItem:
                name = 'help'
                title = 'Help'
                closable = False

                Container:
                    Html:
                        source = '''
                        <h3>Datasets</h3>
                        <p>Pieces must be numbered sequentially from base
                        (hook) to apex. If more than one image is required for
                        a piece, use letters for the suffixes (i.e., "piece
                        2a", "piece 2b", etc.). The order in which the images
                        for a single piece are labled does not matter since the
                        program will automatically align them and merge the
                        images for analysis.
                        </p>

                        <p>When loading data (File -> Open), select the
                        cochleogram_analysis folder. All pieces found in that
                        folder will be loaded. Any prior analyses will also be
                        loaded as well.</p>

                        <p>When loading/saving analyses, you can load/save each
                        piece individually via the load/save buttons on each
                        tab. To load/save all pieces at once, use the file
                        menu.</p>

                        <h3>General interaction</h3>
                        <dl>
                            <dt>right click + drag</dt> <dd>Pan image</dd>
                            <dt>arrow keys</dt><dd>When a tile is not selected, you can use the arrow keys to pan the view (large step)</dd>
                            <dt>shift + arrow keys</dt><dd>When a tile is not selected, you can use the arrow keys to pan the view (small step)</dd>
                            <dt>mouse wheel</dt> <dd>Zoom</dd>
                            <dt>t</dt> <dd>Select tile mode</dd>
                            <dt>i</dt> <dd>Select IHC mode</dd>
                            <dt>1</dt> <dd>Select OHC1 mode</dd>
                            <dt>2</dt> <dd>Select OHC2 mode</dd>
                            <dt>3</dt> <dd>Select OHC3 mode</dd>
                            <dt>4</dt> <dd>Select extra mode</dd>
                            <dt>s</dt> <dd>Select spiral tool</dd>
                            <dt>e</dt> <dd>Select exclude tool</dd>
                            <dt>c</dt> <dd>Select cell tool</dd>
                        </dl>

                        <p>Analysis requires the following steps:</p>
                        <ol>
                            <li>Aligning the tiles so that they overlap as
                            accurately as possible.</li>
                            <li>Tracing a spiral through each row of hair
                            cells.</li>
                            <li>Marking individual hair cells.</li>
                            <li>Marking bad regions.</li>
                        </ol>
                        <p>Tools are provided to facilitate each step. Be sure
                        that you are satisfied with the result of the current
                        step before moving to the next step. Although you can
                        go back and edit a previous step, it may affect your
                        analysis (e.g., if you need to move a tile after
                        marking hair cells, you may have to manually edit a
                        large number of hair cells).</p>

                        <h3>Tile mode</h3>
                        <dl>
                            <dt>left click</dt> <dd>Select tile</dd>
                            <dt>n</dt> <dd>Select next tile</dd>
                            <dt>p</dt> <dd>Select previous tile</dd>
                            <dt>arrow keys</dt> <dd>Move selected tile (large step)</dd>
                            <dt>shift + arrow keys</dt> <dd>Move selected tile (small step)</dd>
                        </dl>

                        <h3>Spiral mode</h3>
                        <p>You must select a minimum of four points to create
                        the spiral. You can add points in between existing
                        points and the spiral will be rerouted through those
                        points. The algorithm assumes that the "next" point in
                        the path is the one closest to it (i.e., the order in
                        which you add the points does not matter).</p>
                        <p>However, the very first point you add should be the
                        beginning of the spiral on the side that faces the
                        most basal region of the cochlea. If you realize you
                        made a mistake in your starting point, you can use alt
                        + left click to select a different point as the start
                        of the spiral.</p>
                        <p>Be sure that the spiral bisects the nuclei (IHCs) or
                        cuticular plate (OHCs).</p>
                        <dl>
                            <dt>left click</dt> <dd>Add point</dd>
                            <dt>shift + left click</dt> <dd>Remove point</dd>
                            <dt>alt + left click</dt> <dd>Set point as origin for spiral</dd>
                        </dl>

                        <h3>Cell mode</h3>
                        <p>After marking the spiral, run the algorithm to
                        automatically detect cells. You can play with the
                        settings (each time you run, it will delete the
                        existing cells and create new ones).</p>
                        <dl>
                            <dt>left click</dt> <dd>Add cell</dd>
                            <dt>shift + left click</dt> <dd>Remove cell</dd>
                        </dl>

                        <h3>Exclude mode</h3>
                        <p>Finally, indicate regions that you felt you could
                        not interpret properly for a particular row of
                        cells.</p>
                        <dl>
                            <dt>left click</dt> <dd>Start/end region</dd>
                            <dt>alt + left click</dt> <dd>Remove region</dd>
                            <dt>escape</dt> <dd>Cancel current region</dd>
                        </dl>
                        <p>Some tools are made available to facilitate this process.</p>
                        <ul>
                            <li>You can copy a set of excluded regions to any other spiral.</li>
                            <li>You can merge all excluded regions across the OHC spirals into a single set of excluded regions that apply to all OHC spirals.</li>
                            <li>You can simplify a set of excluded regions for a particular spiral if they are overlapping (this will combine overlapping exclusion regions into a single exclusion region).</li>
                        </ul>
                        '''
