# Generated by Django 4.1.7 on 2023-03-07 00:09

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import wagtail.blocks
import wagtail.documents.blocks
import wagtail.embeds.blocks
import wagtail.fields
import wagtail.images.blocks


class Migration(migrations.Migration):

    dependencies = [
        (
            "wagtailperson",
            "0007_alter_person_options_alter_personindexpage_options_and_more",
        ),
        ("taggit", "0005_auto_20220424_2025"),
        ("wagtailpress", "0009_auto_20200415_1507"),
    ]

    operations = [
        migrations.AlterField(
            model_name="blogarticleauthor",
            name="author",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="blog_articles_author",
                to="wagtailperson.person",
                verbose_name="Author",
            ),
        ),
        migrations.AlterField(
            model_name="blogarticlepage",
            name="content",
            field=wagtail.fields.StreamField(
                [
                    (
                        "heading",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "header_level",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("h2", "H2"),
                                            ("h3", "H3"),
                                            ("h4", "H4"),
                                            ("h5", "H5"),
                                            ("h6", "H6"),
                                        ],
                                        label="Header level",
                                    ),
                                ),
                                ("text", wagtail.blocks.CharBlock(label="Text")),
                            ]
                        ),
                    ),
                    ("paragraph", wagtail.blocks.RichTextBlock()),
                    ("quote", wagtail.blocks.BlockQuoteBlock()),
                    ("image", wagtail.images.blocks.ImageChooserBlock()),
                    (
                        "imagetextoverlay",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "image",
                                    wagtail.images.blocks.ImageChooserBlock(
                                        label="Image"
                                    ),
                                ),
                                (
                                    "text",
                                    wagtail.blocks.CharBlock(
                                        label="Text", max_length=200
                                    ),
                                ),
                                (
                                    "text_color",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            ("black", "Black"),
                                            ("white", "White"),
                                            ("red", "Red"),
                                            ("blue", "Blue"),
                                            ("green", "Green"),
                                        ],
                                        label="Text color",
                                    ),
                                ),
                                (
                                    "text_position",
                                    wagtail.blocks.ChoiceBlock(
                                        choices=[
                                            (
                                                "top: 50%; left: 50%; transform: translate(-50%, -50%);",
                                                "Centered",
                                            ),
                                            ("top: 20px; left: 20px;", "Top Left"),
                                            ("top: 20px; right: 20px;", "Top Right"),
                                            (
                                                "bottom: 20px; left: 20px;",
                                                "Bottom Left",
                                            ),
                                            (
                                                "bottom: 20px; right: 20px;",
                                                "Bottom Right",
                                            ),
                                        ]
                                    ),
                                ),
                            ]
                        ),
                    ),
                    (
                        "link",
                        wagtail.blocks.StructBlock(
                            [
                                (
                                    "description",
                                    wagtail.blocks.CharBlock(label="Description"),
                                ),
                                (
                                    "url",
                                    wagtail.blocks.URLBlock(
                                        label="URL",
                                        validators=[
                                            django.core.validators.URLValidator(
                                                [
                                                    "http",
                                                    "https",
                                                    "ftp",
                                                    "ftps",
                                                    "mailto",
                                                    "xmpp",
                                                    "tel",
                                                ]
                                            )
                                        ],
                                    ),
                                ),
                            ]
                        ),
                    ),
                    ("document", wagtail.documents.blocks.DocumentChooserBlock()),
                    ("embed", wagtail.embeds.blocks.EmbedBlock()),
                ],
                blank=True,
                use_json_field=True,
                verbose_name="content",
            ),
        ),
        migrations.AlterField(
            model_name="blogarticlepagetag",
            name="tag",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="%(app_label)s_%(class)s_items",
                to="taggit.tag",
            ),
        ),
    ]
